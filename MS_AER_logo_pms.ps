%!PS-Adobe-3.1 EPSF-3.0%%Title: MS_AER05_logo_pms.ai%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Administrator%%CreationDate: 18/5/05%%BoundingBox: 0 0 511 68%%HiResBoundingBox: 0 0 510.2164 67.8804%%CropBox: 0 0 510.2164 67.8804%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: (PANTONE 279 CVC)%%CMYKCustomColor: 0.6900 0.3400 0 0 (PANTONE 279 CVC)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 4680 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF7DF8F8F852FF7DF8F8F85227F827FD24FF272752FFA8A8FD%48FF52F8F8F87DFF27F8F8F87D52527DFD23FF52F8F8A852F827FD48FF27%F8F8F87DFFFD04F87DA87DFFFFFF527D7DFFFFA87DA8A8A8FFA8527D7DFF%FFFF7D522752A8FFFFFF7D7D527DFFFF7D27F8277D27F827A8A8A8FD44FF%A8FD04F87D52FD04F87DF8F8A8A8FD04F827FF27F8F8F82752FD04F827FF%27FD05F87DFF27FD04F85252FD08F827F852FD44FFA8FD04F85227F8F8F8%5252F8F8A8F8F82752F8F85227F8F8F827F8F85252F8F852F8F852A852F8%7D7DF8F85252F8F82727F8F85227F8F8527D7D7DFD44FF7DFD09F85252F8%2727F8F8FFA8525252F8F8277DF8F852FFA8F8F852F8F8F85252A8A8F8F8%27FFFFF8F8527DF8F8FF52F827FD48FF52F82727F8F8F827F8F87DF8F827%27F87DFD04FF7DF8F8FF7DF8F8A8FFA8F827A87DFD04F827A8F8F87DFFA8%F8F87D52F827FF27F852FD48FFF8F82752F8F82752F8F852F8F852F8F87D%FF7D7D7D52F827FF52F8F8A8FF272752A8A8A85227F8F827F8F8A8FF7DF8%F85227F852A8F8F87DFD47FFA827F8527DF8F87D27F8277DF827A827F852%7DF8F85227F852FF7DF8F87D7DF8F827F8F852FF27F8F87DF8F852A8F8F8%27FFF8F87DFFF8F827A8FD43FFA8FFFF7DF8F87D7DF8F8A8F8F85227F8F8%FF52FD04F8277DF8F87DFFA8FD05F8277D27FD05F852A827FD05F8A87DF8%F8A8A8F8F8F87DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8A87D5227A87D5252A85252527D27%7DA8A852272752A8A827527DA8A8A827272752A8FF7D5227272752A8FF7D%52272752A8A87D2752A8A8525252FD45A8FFA8FFFFFFA8FFFFFFA8FD07FF%A8FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FD16FFA8FD09FFA9FD0BFF84AFFD0BFFAFAFFFFFFFA8FF%A8FFFFFFA9AFFD10FFA8A9FD0CFFA9AFA8FD0FFFA8FFA9FD1CFF2F54A8FD%05FF7E5AAF5A5AFD09FFA85A7EFD0AFFA92FA8FFFF7E302F5A7EFFFF7E2F%FD0DFF7E5AAF7E53FD0BFF845A2F305AFD0DFF7E30A85A7EFD1AFF7E5A2F%AFA884A9847E5A2FA9537E7EA9A97E5AA9A9847E845AA97E7E5AA97E7E7E%FFA87E5A5AA9FFFF842FA9A8FF7E7E537E7EA9A884A97E54A9FF845A84A8%5A2FA95A84A87E5AFFA87E7E7EA8FFFFA92FA95A5AA8845AA9A9845A84FF%A95A7EFF8454A92FA9A87E5AFF84845AFD13FF5A535A847E2FA92F7E2F5A%7E5A5354595A2F5A2F842F5A53547E7E2F5453302F307E5A2F5A2FFFFFFF%5354537E7E3053545A5A5A7E2F7E2F5A53AF535A2F5A535A7E5A5A5A2F5A%537E2F5A2FA8FFFF7E30595A535A2F5A537E2F5A5A842F5A2F7E595A8454%5A5A2F305A5A2F5AFD12FFA92F5A2F855A7E845AA85AA8FF2FAF5A5A2FA9%845A5A5AA9A92FFF7E5AA87E547E5A7E2FA97E5AFFFFFF5A5AA9A87E5AAF%2F8454A95A5A307EA9FF845A5A5A7E5A7EFF305A2FA97E5A5A7E845AA8FF%FF7E535A54A92F7E7E7E845A54847E5A7E7E7E5A7EA92F7E2F7E5A84547E%FD13FFFD065A2F5A2FA92F7E7E30845A5A5A535A535A2FFF5A5A7E305AA9%535A5A5A7E545A5459FFFFAF2F5A7E84535A5A545A5A5A305A5A2F5A7E5A%2F5A2FA92F5A7E5A7E545A5A535A5A842FFFFFFF2F7E7E307E5A535A5A84%535A2F7E2F7E53842F847E5A7E305A5A7E307EFD12FFA95AA8FF5A7E7E5A%5A7EFF7E5A845AA953AF845A54AF7E7EFF845A7E545A7EA95A5A7EFF5A7E%5AA9FFFFA95A5A5A7EA95A7E5AA95A7E5AA9A85A5AAF7E5A7E5AA8845A84%5AFF7E5A5AAF5AA97E7EFFFFA95A84FF53A9845A53FFA85A54A9FF7E2F84%A85A84847EFF5A5A7EA953A9FD13FFA8FFFFFFA9FFA9FD05FFA9FD05FFA8%FD05FFA8FFFFFFA8FFFFFFA8FD0BFFA8FD07FFA8FFFFFFA8FFFFFFA8FD09%FFA8FD05FFA9FFFFFFA8FD05FFA8FD0DFFA8FFFFFFA8FD04FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: MS_AER05_logo_pms.ai 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:e1824e44-c79b-11d9-8775-000a95b558da'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:e1824e44-c79b-11d9-8775-000a95b558da'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:e1824e44-c79b-11d9-8775-000a95b558da'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-04-04T14:26:34+01:00</xap:CreateDate>
  <xap:ModifyDate>2005-05-18T12:54:16Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2005-04-04T14:27:00+01:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>36</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAJAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q+Ff+cufMP6V/N+4s&#xA;lblFotpb2SgH4ebKblz86z8T8sVTDyH+Yv8Ag3/nGLX4bWTjq+va7c6dY0PxIj2Nr9YlH+pHsCOj&#xA;MuKvMvyptbSXz/pFzfKX07S5H1a/UU3t9Nja8lXfb4lg4+9aYq93/Ie4/JGDzNrXnuzl1yzOg2zz&#xA;3+o67LZtbI16xj+FbaNZDK/xBQOvQAmmKsl1D/nNjyNDftFZaHqN3Zq3H60xhiLDuyxlm+ipH0Yq&#xA;y7zF/wA5N/l9pHk7RfNUMd1qFnrcssMFtCsa3ET24BmWZXdQpQsoNCeoIqDXFUt0n/nLv8r7+Zkd&#xA;L2zhgtGu7q4nSMKrDiBAiq7SSSlnC/CtO9eIJxVIT/zm15H+u8BoGpfU+VBPyg9Th/N6XOlfbn9O&#xA;Ks880/8AORn5caD5L0zzUtxJqEGsh/0XZWygXEjRHjKHVyojETfC5J+VcVef2f8AzmnoYubb9LeV&#xA;L+x0+5+JLtJUlJWtOSIyQhwD1o+KvTPO359/l35R8u6Zrd5dveLrMCXWlWVooe4mhkUMJODlAi70&#xA;JcjfbcimKvPdG/5zT8h3eoRW+paRf6bayMFa8rHOsdf2nRCH4jvxBPtirCf+ckf+cirfW7Wfyd5T&#xA;muIIoLorqepxOgjuY41+FIXjYtwLmrdK0HauKvNLL837zy15KstI8majqtjrU9wbvzBqE7xFHYRh&#xA;I4benJhGvxE8tyd/YKvoj8tP+ck9Ifyn5bttWtdUvdSupRp93qMogPO4URerMKyKzx87gKOILdqc&#xA;ioKr6AxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtMyqpZiFVRVmOwAHc4q/OO+juvzA8/+&#xA;atXjq0bx6trbkbcILaKWeMb9hxRMVSfy3pd3rEV3DLI/6I0W1u9VuB+wh9NEX5GeZYIa+48MVTDy&#xA;j/oHlDzfrR2d7a20a2Y9BLqE3qvT3+rWcy/Tiqy/ttR038tNJb4o7PzBqN3cP2WYackUMJJ7+m9z&#xA;P9+KvpKxu/8AnG7y/wDk55V8u+bZbe9g1SCHVLiO29eSd7306yyyvaESpwaVo1DkbDj2OKvFfzkX&#xA;yPeeYNA8v/ltZyW+hTQrcW9vK1yWe91BxGX43TPIoeKCCnYjcDepVV/+cjvI+g+RfMui+WNFtfRt&#xA;4NKiuLq8eplu7mSWVHmdiTt+7ACjZd6Yq9O/PO5/L/SPyU8q+RNAu7E3F69rdRyK6ELGkJaW9mZO&#xA;RBlduvVqmlaYqwI+Qfy41byRonl+D8wNPHnKC6l+rxvFeLYyLfGPhAZXhUx8XXkJONPiNR3CqT+Z&#xA;9e/MryDq9h5S85x6fr1tosaNZaVqKW2pQRwOAqqkg/fwgrGBw5KaU2pxxVdrUukeavz8sLLVYV0r&#xA;y419Y2EensfTit7CMIiQL9kRqy+FBVicVZd/zl/5k8san5n0Dy95fEEs2hW0sNy1mqlEM7IIrUcN&#xA;v3QjrxH2eVOtRirDPP8AoNzf/mD5S8imFbfULLT9G0W8WNVUi7uESSUtQfE6Nc8ST/LirIfzqTy5&#xA;q3/ORNn5eC2ul6Bp82n6XcyD04IEiqslw7n4VHH1mUlvDFX2jZ6X5fa2tpbK0tDbKRcWckMcfAFw&#xA;CJYiop8Qp8S9cVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkOpaBrWoaddWEmtvFHdwy&#xA;QPLFBEsirIpQshNQGFdtsVeY+VP+cWfK3liPWV07Wb5zrmm3GkXbzrA7LbXQAl9KiLxY0G5riq3T&#xA;P+cVfKem+V9Y8uWusXy2mutbnULgrAbhktX9WONX4UVOfxEcd/uxVB/9Cg+Tv0ANCGu6ktj9bN85&#xA;At+bS+n6S8m9P7KLy4in7RxVkGpf845+V9R8h6b5Ju72V9L0cu2m3AjjW5ieVmeRxItAebOeQK8T&#xA;4bDFWEeVv+cSPyy/SRuF8yProtWDNZgwtGN/hEwibkdwe4B8MnLHKPMEMRIHkWXXH/OM/lu48+w+&#xA;d5dXuzqtvcW91BbrHbrao1oqJAixKgokaxKAvLtkGSN/M/8AKHyp+YFmj+ZdaSOXSuSpqMIhhkgE&#xA;hAKSMSV4ll6OOvSm+SEJHogyDDvLf/OHv5eW9zb6p+mbjWbdSJIYpBE1s/E/tenTmtR05U8a4CCD&#xA;RUG+SbefP+cU/Knm/V31h9Sl0y/lREl+qQRJC3poEQmHoCFUD4affgSk+lf84j+QPLlwuta3rkt/&#xA;DaMr8b2ONLXlyAT1FDfGK0HEtxPQg5KMTI0OaCQBZT7z1/zjZ5P/ADD1BfMdxqssN9dRpzvbKONU&#xA;nVVCozqeSkhAAGFNvHAQQaKg215K/wCcVfJPlPVbfV7e8mv9TtHEtrNeokixSLurpGvFOS9VLA0O&#xA;43wJRUf/ADjh5ftvzAf8wZtdvZNZF1JqDeusH1dZGqfs8FIWOvw/FtQYqlfmb/nGTyB591y88zNr&#xA;9w9zevW7l05rcwtKqqCaUlAagBNDkpQMdiKQJA8notrc6bpFtDpUfmuyto9PRbVLd/qytGsKhAhB&#xA;cEFQtMmMMzuIn5MTkiOoTRlv1s/rzeYIhZcBJ9aMUIi4HcNz5cae9chwm6rdlxCr6LrSHU7y3S5t&#xA;NejuLeSvCaKGF0ahoaMpINCKYJRINFQQdwq/o7Xv+rv/ANO8f9cCXfo7Xv8Aq7/9O8f9cVU57fVb&#xA;dOdxriQoTQNJBEor4VJGEAnkgmkO1zcLqKaYfMUQ1CReUdr6MXqMtC1Qta/ZUnJeHKuKtkcYur3R&#xA;n6O17/q7/wDTvH/XIMnfo7Xv+rv/ANO8f9cVUL1b+xg9e98wRWsAIUyzRQxpU9ByZgMlGJkaAtBk&#xA;BzUbG7fUJGisPM9tdyKOTJAlvIwHSpCMdsMsco8wQiM4nkUb+jte/wCrv/07x/1yDJ36O17/AKu/&#xA;/TvH/XFXfo7Xv+rv/wBO8f8AXFUA9/wNwH802qm0NLsFbcekS3D95Vvg+I0375Z4Uttjux4496Mg&#xA;ttWuIUnt9bWaGQBo5Y4ImVlPQqwNCMgQQaKQbX/o7Xv+rv8A9O8f9cCU2xV2KuxV2KsV/MnzGdD8&#xA;r3DxNS9vP9GtAOvJx8TD/VWp+dMytJi45juDRqMnDHzeS+TdcOgtrzWkro7abWGR1CsJ+Uag8TX7&#xA;LSNxza6jHx8N/wA5wcM+HiruT2084+ab2by7p8WsFLi6hln1CdVifiPUkK8loB8EUVabZRLTwAke&#xA;HlybRlkeEWxu1a8TyRrOpyXvIapdx2k9pxUs8ikXImZ68uzACnc5kSrxYxr6Rf6GkXwE3zKcQebv&#xA;Nfli4utOS7W5h0/T4QkBjURxNIIqGg3LI025J+I9cqODHkANVZ/W2DLOFjuCtY+ffNWm38H1nVV1&#xA;SK9097yaIKn7lzFI6qCo2ZOAJHTelMjLS45A0OGpUmOeQO5uwgNW1vznceTYNU1TUEuLC+mNvb2r&#xA;xozMUYs0rDhxPEx8RlkMeMZOGI3DCU5mFk7FNrnVPNi+YLXy75e1vmIoo47hEiijgtfTRUZefxcu&#xA;NPi2G+w32yqMMfAZzj+1sMp8XDE/sSyX8wPPVzczT2+oGKO0dYYkIgRGPT976hFWYKT336UywaXE&#xA;BRHP3sDnmTsUZrXnvzPqlzqSfXU0u2srCs1nxRvVkkVI5EHLckvKeJrsBkMemhEDbiJLKeaRJ3qg&#xA;zz8qLRbTyLZO1FM5lnkJ2G7kA/8AAKMwdbK8pcnTCoB5b5djk1PUtQ1CSDS547q5LSnVJSjpzYux&#xA;jX1Iq1571rmzynhiB6th0cLGOIk7c+qtrfmvWr+w1lIr2Oz0W2aKxtdICqCYixCBRs3wLDVj9HTB&#xA;jwRiY7XI72meWRB3ocqROk+bta0qG+sor70LPTtLQ29uQgpdSrEppUVLLLMzfRkZ4Iyo1uZfZuyj&#xA;lMbF8h9rdv5185ai9tpj60mmtFbNczXs/CP1WYGWMcqdOLKoA9zvidPjjcuG9+SjNM7XWyY+Y/PP&#xA;mBILDS7fWUl1CKBpdQuNOjSSN9i6t6zmOn7sKWCqO+56ZXi00LMjHa9r/UzyZpbC9/Jjmp6z5i8x&#xA;aLo8Gqahzjub+SCJWRV+wsQErsONePrkffmRDHDHKRiOQ/H3NMpynEWeqP1XzJqukeatUu4pEvLn&#xA;TYEtIr1oYx++4pC0hoCRX4yF5U7ZXDDGeMDkCbpnLIYyJ50rR+ffNulXMkFxqo1FbzTjc8wqH6vN&#xA;LAZI+JG1UbiCOm/TAdLjkLAqpfPdfHnE7m9kV5f80ed38w+WoLvVDcR6mvrSWxRABC0jqeRC7krG&#xA;WB7ZHLhxcEyB9LLHknxRs809/O+4c6NpmnRist3d8lXufTQrT75RlHZw9RPcGzWH0gebz22ur7St&#xA;ZvtZtLaHTLrRqQPZIXceq/KAncsCAalt6Vp45nkCUREmxLr9rigmJMgKpkflrzp54+vBZr5LlLq1&#xA;mlK3TW6LHJ6bNE68W5BOQWuwG5275j5tPirYVR6W3Y8s759PJQ8v/mF5otr+aTVNRleRbeadbKeB&#xA;DFMY0ZlCOpQpXjsVFMll0sCPSOvO0Y88gdy1ofnzz1NqljdyXnrxXc/CSzf0EjaIMFIjFQ/IVPbw&#xA;645NNiESK5DzRDNMkG0mnvGk8r6/qRJ5axqkUfzCepcP/wAMy5cI+uMf5sf2NZPoke8/tTCfzl5u&#xA;hmk0/T7v6ha6GiWsUSCEKWhIi5SmYr9riT33oKd8rGnxncizLfqzOWfIGuFObXzJ+YHmPzINK06+&#xA;SwdbKKS62Ro1JjQu6kK5+JpBTfbKThxY4cRF7tgyZJyoGtnsGalz3Yq7FXYqxzzH/g/9M6P+nP8A&#xA;joer/uJ5+v6fq8l/k/dcuXH7ftmRi8Thlw8uvJqycFji59En8yf8qt/Tt9+m6fpX0B9c5fWqelwX&#xA;j9j93WnGlN6075dh8fhHD9Pwa8nhcR4ufxQ3lb/lUP6Ytv0Jx/Sfpyejz+tfZ9NvU5er+7rw5Vr2&#xA;yWb8xwni+n4McXhX6efxQI/5UZ9VmpT6v6sfq0+v09SknClPbn02/DJ/4Vfn/msf3Ff2p5J/yrL9&#xA;Ka76/p/XvRb9Ner9Y4+lzT+f939vhx9PetKZQPG4Y1y6cm0+HZ7+qVaN/wAqa+paj9S4+n6TfXPU&#xA;+s+r6FRXhy/ecfHhv45bk/MWL/Q1w8GjX6Uwvf8AlV36A0X61/xx+cn6I/3r48+fx14/F9r/AH5k&#xA;I+Pxyr6uvJmfC4RfLpzSY/8AKi/rvxf71ervy/SH95y71265b/hVeX+a1/uL8/ii77/lTf8Aihvr&#xA;XpfpL1f3v999X9blvzp+6rXr28cjH8xwbfT9v62UvB4t+aJ8y/8AKo/0xefpv0f0jwX61T169VpT&#xA;0tufT7PxU9q5HD+Y4Rw8vgnJ4Vni5ss039Cf4ch+o/8AHF+rfuaep/ccff8AefZ+nMSfFx7/AFW3&#xA;xrh25PO4f+VC+snp09TkOFf0hStdq12+/NgfzX44XEHgfi0dq/8AypX6/ffpD0frXrf6Xw+s19X4&#xA;q8fS968uO1euQx/maFcvgyn4Nm1mr/8AKlf0pdfpDh9b4p6/H61xrt9n0tuXTlT/AJqw4/zPCK5f&#xA;BZ+DZvn8URrX/Knq6X+kPS/3ni+p8fXr9X4fuvV4b0pT+8+Lx75HH+Y3rv35c0z8Ha1+uf8AKnf0&#xA;jD+k/q/1r6unpen6/p+jw/d19H939j7Nd6U9sGP8xXpur8kz8G91G6/5U1+gLH1+P6K9ab6l/vZy&#xA;9T4fWpT97T7Na7ZKP5jjNfV15IPg8I7vijLX/lVHDXfS9Lh/0ufU+scf7w04+p39T7Ppd6U7ZCXj&#xA;+n7OX4+bIeFv9qW6d/ypb9E6h6HH6rRPrvP616vD1V4U/wB2cfU4/Y9q5ZP8zxC+fTkwj4NH9qda&#xA;b/yrf/EOk/Uqfpf6on6K/wB6afVvSbjTl+7/ALvl9r4q++Uz8bglf03vy5tkfD4hXOtuaO81f4L/&#xA;AEro/wDiCv171f8AcTX6xx9Tmlf7r4PtcK88hg8ThlwcuvJlk4LHFz6JZcf8qu/S2t/WPT+vek36&#xA;a9T6xw4c0rWv7rl6nGnD4q9MsHj8Ma5dOTA+FZvn1Qvlf/lUfpaj+ivS4+g/176x63L6v+1T1v2e&#xA;n2d+lclm/MbcXw9/wRj8Lem/LH/Kn/0jJ+hvR+t+jLz9b6xx9LifVp9Z+CnCtadq9sc35ivVy+H6&#xA;EY/Bv0qHl/8A5U7+mJf0Xx+vcZOHL6xSnE8/R57VpWlN/wCXJZfzHD6uXwXH4PFtzXL/AMqd/Q1p&#xA;xp+jPrj/AFb/AHtp9a4Jz5ftfZ4fa2/HB/hHEf51eXJf3PCO6/Pm35i/5U//AIkf9Len+lOf+k8f&#xA;X9P1P+LfT/d18f8AhscX5jg9P0/Bcng8W/NPfL/+BP8AEuofobj+muH+m8fW4+nyX7PP91xrxpwy&#xA;nL4vAOL6enJthwcRr6n/2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:e1824e44-c79b-11d9-8775-000a95b558da'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:3112493d-a50d-11d9-9762-000a95b558da</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:e1824e44-c79b-11d9-8775-000a95b558da'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -67.8804 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 67.8804 li510.217 67.8804 li510.217 0 liclp[1 0 0 1 0 0 ] concat14.3331 37.7447 mo23.0435 0 li37.5606 0 li37.6016 21.3316 li47.7784 0 li62.5435 0 li53.6309 37.7447 li43.1651 37.7447 li47.8282 17.15 li37.898 37.7447 li30.1334 37.7447 li29.6646 17.5562 li24.6636 37.7447 li14.3331 37.7447 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf64.0884 5.53663 mo65.3765 0 li75.2388 0 li73.9507 5.53663 li64.0884 5.53663 lif56.4581 37.7437 mo63.148 9.52051 li73.0108 9.52051 li66.3204 37.7437 li56.4581 37.7437 lif118.54 18.6021 mo115.552 18.5513 112.572 21.3892 111.762 23.4146 cv108.243 37.7476 li98.709 37.7476 li105.436 9.79053 li114.221 9.80372 li113.382 13.2022 li115.408 10.9742 119.546 9.38526 122.585 9.5879 cv120.419 18.438 li118.54 18.6021 lif73.0679 19.3111 mo75.9039 14.0445 80.9678 9.99317 87.045 9.18262 cv90.709 8.69434 94.5977 8.90332 97.5782 11.2081 cv100.33 13.336 101.637 16.6226 101.434 19.8648 cv91.3238 19.8511 li91.3663 18.6363 91.1304 16.4341 89.7076 15.9703 cv86.6016 14.9566 83.8331 17.8931 82.6177 20.5269 cv81.4356 23.0875 80.5977 25.7925 81.2056 28.6285 cv81.6104 30.857 84.2383 32.0728 86.2642 31.0601 cv87.9434 30.313 88.6646 29.0084 89.4908 27.441 cv99.7159 27.4136 li96.4752 37.1363 84.0064 41.7964 75.0933 35.7183 cv72.2579 33.6929 71.647 30.4527 71.2422 27.2105 cv71.2422 27.2105 71.3462 24.0718 71.6163 23.1929 cv71.876 22.3492 73.0679 19.3111 73.0679 19.3111 cvf249.988 12.8672 mo250.352 12.8614 250.787 12.8614 251.041 12.5264 cv251.094 12.4556 251.199 12.2793 251.199 12.0323 cv251.199 11.9385 251.182 11.65 250.882 11.5503 cv250.734 11.4971 250.588 11.4971 250.264 11.4913 cv249.935 11.4913 li249.594 12.8672 li249.988 12.8672 licp250.346 10.9444 mo250.458 10.9444 250.564 10.9444 250.67 10.9502 cv251.012 10.9678 251.375 11.003 251.617 11.2793 cv251.723 11.4029 251.846 11.6031 251.846 11.9678 cv251.846 12.397 251.658 12.8321 251.299 13.0909 cv251.135 13.2085 250.946 13.2735 250.758 13.3262 cv251.316 15.0972 li250.6 15.0972 li250.135 13.4205 li249.458 13.4205 li249.035 15.0972 li248.412 15.0972 li249.446 10.9444 li250.346 10.9444 lif250.186 16.8609 mo252.213 16.8609 253.861 15.2125 253.861 13.1851 cv253.861 11.1578 252.213 9.50879 250.186 9.50879 cv248.158 9.50879 246.51 11.1578 246.51 13.1851 cv246.51 15.2125 248.158 16.8609 250.186 16.8609 cvcp247.26 13.1851 mo247.26 11.5713 248.572 10.2588 250.186 10.2588 cv251.799 10.2588 253.111 11.5713 253.111 13.1851 cv253.111 14.7984 251.799 16.1109 250.186 16.1109 cv248.572 16.1109 247.26 14.7984 247.26 13.1851 cvf210.898 9.79053 mo215.836 9.79053 li216.85 5.53663 li217.426 3.91602 218.689 2.79297 219.688 1.96534 cv221.645 0.342286 226.76 0.704102 230.203 0.704102 cv229.119 5.88135 li226.843 5.67334 225.963 6.67286 225.766 7.67579 cv225.249 9.79053 li231.524 9.79053 li233.068 3.3042 li242.229 3.3042 li240.604 9.79053 li245.541 9.79053 li244.074 16.4751 li239.118 16.4751 li236.354 27.6168 li236.152 28.2242 235.949 29.4371 236.354 30.0445 cv236.962 31.2593 239.033 31.0386 240.76 31.0386 cv239.129 37.5445 li234.977 37.6119 228.509 38.1578 226.908 35.3511 cv226.205 34.1177 226.225 32.0552 226.429 31.0601 cv229.934 16.4751 li223.824 16.4751 li219.118 37.7447 li209.457 37.7447 li214.245 16.4751 li209.315 16.4751 li210.898 9.79053 lif129.197 20.3316 mo127.917 22.9957 127.307 25.898 127.964 28.8492 cv128.403 31.1666 130.865 32.4312 133.058 31.3775 cv137.004 29.691 138.27 25.1783 138.928 21.1734 cv139.146 19.066 138.788 16.3375 136.735 15.6949 cv133.373 14.6402 130.513 17.5914 129.197 20.3316 cvcp146.455 29.3853 mo144.922 32.6851 144.574 32.355 141.91 34.7847 cv137.662 38.6578 130.256 38.9449 124.787 37.5269 cv120.736 36.3121 118.103 32.6656 117.495 28.6148 cv117.495 28.5777 li117.411 27.9371 117.343 27.0757 117.495 25.5757 cv118.305 20.3091 121.141 15.3804 125.395 12.2066 cv129.853 8.88086 135.169 8.57129 140.588 9.62305 cv142.551 10.0044 147.24 12.337 148.156 16.4488 cv148.785 19.2691 148.85 21.3111 148.281 24.1636 cv137.863 28.4419 li157.045 28.4488 li157.113 31.6226 159.287 32.4976 162.527 32.4976 cv164.283 32.4976 166.174 31.2769 166.039 29.6617 cv165.873 27.6617 164.799 27.6939 162.924 27.0689 cv158.244 25.5093 152.046 24.4976 150.839 18.9605 cv150.22 16.1226 152.27 12.8838 154.228 11.4659 cv158.844 8.12354 167.016 7.73389 172.053 9.72803 cv175.56 11.1167 178.002 12.17 177.599 18.0152 cv174.763 18.0152 171.096 18.0152 168.26 18.0152 cv168.561 14.5445 164.695 14.5044 163.072 14.5044 cv161.317 14.5044 160.654 15.65 160.654 17.0035 cv160.654 17.9478 161.435 18.4918 161.862 18.6421 cv163.213 19.1148 168.471 20.3863 170.166 20.6656 cv173.096 21.15 176.534 23.3316 176.414 28.1617 cv176.331 31.4703 175.164 32.9097 173.165 34.9097 cv172.15 35.9234 171.307 36.5367 169.417 37.2828 cv164.67 39.1568 153.691 38.8238 150.518 36.9078 cv149.852 36.5054 147.012 33.9507 146.595 31.5347 cv146.42 29.6871 li146.455 29.3853 lif189.721 20.3316 mo188.49 22.9957 187.904 25.8101 188.536 28.7613 cv188.957 31.0796 191.476 32.3433 193.584 31.2906 cv197.377 29.6041 198.991 25.1783 199.623 21.1734 cv199.834 19.066 199.14 16.3375 197.166 15.6949 cv193.935 14.6402 190.986 17.5914 189.721 20.3316 cvcp209.162 16.8472 mo209.852 22.3316 209.984 27.0445 204.18 33.6597 cv200.67 37.6578 190.924 38.9605 185.455 37.5416 cv181.404 36.3267 178.704 33.5347 178.163 28.6285 cv178.115 28.649 li178.031 28.0074 177.964 27.146 178.115 25.646 cv178.163 25.5904 li178.973 20.3238 181.006 15.5103 185.26 12.337 cv189.719 9.01075 195.871 8.37647 201.256 9.5879 cv203.957 10.1959 207.839 12.9991 208.852 15.8355 cv208.936 15.9781 209.172 16.7486 209.162 16.8472 cvf1 lw0 lc0 lj4 ml[] 0 dshtrue sadj0 37.7408 mo509.983 37.7408 li@84.0943 63.0484 mo84.67 67.4004 li90.9742 67.4004 li87.646 46.0567 li80.9581 46.0567 li71.1021 67.4004 li76.3824 67.4004 li78.3663 63.0484 li84.0943 63.0484 licp83.71 58.6324 mo80.0303 58.6324 li82.8462 52.4566 li83.71 58.6324 li/0 <</Name (PANTONE 279 CVC)/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 0.69 0.34 0 0 ] >>add_csd1 /0 get_csdsepcs1 sepf106.798 67.4004 mo101.103 67.4004 li101.615 64.4566 li100.175 66.8565 98.6382 67.8165 96.334 67.8165 cv93.8702 67.8165 92.0464 66.2486 92.0464 64.1685 cv92.0464 63.6246 92.1421 62.6646 92.3663 61.4805 cv93.9981 51.6246 li100.079 51.6246 li98.542 60.6485 li98.3824 61.6407 98.3502 61.9283 98.3502 62.2486 cv98.3502 62.9527 98.7339 63.3687 99.438 63.3687 cv100.783 63.3687 101.679 62.0567 102.126 59.4327 cv103.438 51.6246 li109.422 51.6246 li106.798 67.4004 li1 /0 get_csdsepcs1 sepf120.83 55.6568 mo117.982 55.6568 li117.022 61.2886 li116.926 61.9283 116.894 62.1207 116.894 62.3126 cv116.894 63.0484 117.438 63.4644 118.366 63.4644 cv118.814 63.4644 119.166 63.4327 119.838 63.3047 cv119.166 67.4004 li117.79 67.6563 117.022 67.7525 115.902 67.7525 cv113.886 67.7525 112.734 67.3365 111.87 66.2803 cv111.262 65.5762 110.974 64.6807 110.974 63.6563 cv110.974 63.1446 111.07 62.4405 111.262 61.2886 cv112.19 55.6568 li110.014 55.6568 li110.686 51.6246 li112.862 51.6246 li113.726 46.9527 li119.454 46.8565 li118.654 51.6246 li121.502 51.6246 li120.83 55.6568 li1 /0 get_csdsepcs1 sepf129.316 53.5767 mo130.628 51.8804 131.973 51.1768 133.957 51.1768 cv136.645 51.1768 138.404 52.7447 138.404 55.1446 cv138.404 55.8165 138.34 56.6485 138.181 57.4488 cv136.517 67.4004 li130.533 67.4004 li132.101 58.0884 li132.229 57.3526 132.292 56.8086 132.292 56.6485 cv132.292 55.9444 131.685 55.4327 130.789 55.4327 cv130.021 55.4327 129.349 55.8165 128.997 56.4566 cv128.805 56.7447 128.709 57.1607 128.549 58.0884 cv126.98 67.4004 li120.997 67.4004 li124.581 46.0567 li130.564 46.0567 li129.316 53.5767 li1 /0 get_csdsepcs1 sepf148.339 51.2408 mo142.899 51.2408 139.06 55.0806 139.06 60.5523 cv139.06 62.7925 139.7 64.4244 141.171 65.7686 cv142.611 67.1763 144.531 67.8804 146.835 67.8804 cv152.147 67.8804 156.147 63.9766 156.147 58.7286 cv156.147 54.2168 153.043 51.2408 148.339 51.2408 cvcp148.051 55.0166 mo149.235 55.0166 149.907 55.9126 149.907 57.4166 cv149.907 58.8248 149.619 60.6168 149.235 61.8965 cv148.755 63.4327 148.147 64.0406 147.091 64.0406 cv145.939 64.0406 145.235 63.1446 145.235 61.6724 cv145.235 60.4566 145.587 58.2803 145.971 57.0967 cv146.419 55.6885 147.091 55.0166 148.051 55.0166 cv1 /0 get_csdsepcs1 sepf164.338 51.6246 mo163.698 55.4004 li164.306 53.9288 164.786 53.1607 165.49 52.4249 cv166.258 51.6568 167.506 51.1446 168.69 51.1446 cv168.85 51.1446 169.138 51.1768 169.458 51.2085 cv168.754 56.8404 li168.178 56.8086 167.922 56.8086 167.602 56.8086 cv165.106 56.8086 164.018 57.9288 163.506 60.9683 cv162.418 67.4004 li156.434 67.4004 li159.09 51.6246 li164.338 51.6246 li1 /0 get_csdsepcs1 sepf174.262 67.4004 mo168.15 67.4004 li170.806 51.6246 li176.918 51.6246 li174.262 67.4004 licp177.142 50.2168 mo171.03 50.2168 li171.798 45.5767 li177.91 45.5767 li177.142 50.2168 li1 /0 get_csdsepcs1 sepf190.149 67.4004 mo176.038 67.4004 li176.646 63.8487 li184.453 55.4644 li178.565 55.4644 li179.206 51.6246 li192.805 51.6246 li192.293 54.6968 li184.037 63.4644 li190.821 63.4644 li190.149 67.4004 li1 /0 get_csdsepcs1 sepf208.9 60.6807 mo209.06 59.8487 209.092 59.4327 209.092 58.8887 cv209.092 54.2168 206.02 51.2408 201.284 51.2408 cv195.94 51.2408 191.972 55.1768 191.972 60.4244 cv191.972 64.9044 195.108 67.8804 199.876 67.8804 cv202.084 67.8804 203.94 67.2725 205.668 65.9605 cv206.948 65.0323 207.524 64.3287 208.324 62.6963 cv203.012 61.8326 li202.404 63.2403 201.604 63.8165 200.324 63.8165 cv198.916 63.8165 197.956 62.9527 197.956 61.7046 cv197.956 61.4483 197.988 61.0645 198.052 60.6807 cv208.9 60.6807 licp198.5 57.6407 mo198.82 55.8487 199.876 54.7925 201.316 54.7925 cv202.468 54.7925 203.3 55.6568 203.3 56.8404 cv203.3 57.0328 203.268 57.3204 203.204 57.6407 cv198.5 57.6407 li1 /0 get_csdsepcs1 sepf228.748 46.0567 mo222.731 46.0567 li221.516 53.4488 li220.651 51.7847 219.66 51.2085 217.708 51.2085 cv215.276 51.2085 213.26 52.4566 211.788 54.9205 cv210.668 56.8086 210.028 59.1124 210.028 61.4166 cv210.028 63.1446 210.444 64.7124 211.18 65.7364 cv212.14 67.0484 213.708 67.8804 215.244 67.8804 cv217.1 67.8804 218.668 66.9205 219.948 65.0323 cv219.563 67.4004 li225.164 67.4004 li228.748 46.0567 licp220.14 61.6724 mo219.691 63.1763 219.02 63.8487 217.932 63.8487 cv216.876 63.8487 216.268 63.0806 216.268 61.7686 cv216.268 60.8086 216.587 58.8887 216.972 57.5767 cv217.419 56.0084 218.251 55.1124 219.308 55.1124 cv220.204 55.1124 220.908 55.8165 220.908 56.7124 cv220.908 56.8726 220.908 57.0328 220.876 57.2247 cv220.14 61.6724 li1 /0 get_csdsepcs1 sepf253.997 67.4004 mo238.285 67.4004 li241.869 46.0567 li257.165 46.0567 li256.397 50.7286 li247.245 50.7286 li246.701 54.0884 li254.381 54.0884 li253.613 58.7286 li245.933 58.7286 li245.293 62.5044 li254.829 62.5044 li253.997 67.4004 li1 /0 get_csdsepcs1 sepf274.7 46.0567 mo268.684 46.0567 li267.468 53.4488 li266.604 51.7847 265.612 51.2085 263.66 51.2085 cv261.229 51.2085 259.212 52.4566 257.74 54.9205 cv256.62 56.8086 255.98 59.1124 255.98 61.4166 cv255.98 63.1446 256.396 64.7124 257.132 65.7364 cv258.092 67.0484 259.66 67.8804 261.196 67.8804 cv263.052 67.8804 264.62 66.9205 265.9 65.0323 cv265.516 67.4004 li271.116 67.4004 li274.7 46.0567 licp266.092 61.6724 mo265.644 63.1763 264.972 63.8487 263.884 63.8487 cv262.828 63.8487 262.22 63.0806 262.22 61.7686 cv262.22 60.8086 262.54 58.8887 262.924 57.5767 cv263.372 56.0084 264.204 55.1124 265.26 55.1124 cv266.156 55.1124 266.86 55.8165 266.86 56.7124 cv266.86 56.8726 266.86 57.0328 266.828 57.2247 cv266.092 61.6724 li1 /0 get_csdsepcs1 sepf288.635 67.4004 mo282.939 67.4004 li283.451 64.4566 li282.011 66.8565 280.475 67.8165 278.171 67.8165 cv275.707 67.8165 273.883 66.2486 273.883 64.1685 cv273.883 63.6246 273.98 62.6646 274.203 61.4805 cv275.835 51.6246 li281.915 51.6246 li280.379 60.6485 li280.219 61.6407 280.188 61.9283 280.188 62.2486 cv280.188 62.9527 280.571 63.3687 281.275 63.3687 cv282.619 63.3687 283.515 62.0567 283.963 59.4327 cv285.275 51.6246 li291.259 51.6246 li288.635 67.4004 li1 /0 get_csdsepcs1 sepf306.249 62.4405 mo305.449 64.2325 304.905 65.0645 303.945 65.8965 cv302.569 67.1124 300.554 67.8482 298.569 67.8482 cv294.25 67.8482 291.178 64.7764 291.178 60.4244 cv291.178 58.3765 291.914 56.1368 293.162 54.4405 cv294.73 52.3287 297.29 51.0806 300.073 51.0806 cv302.474 51.0806 304.522 52.0088 305.865 53.6724 cv306.73 54.7608 307.05 55.7525 307.081 57.3526 cv301.737 57.9927 li301.737 57.6407 li301.737 56.2325 301.098 55.4004 299.978 55.4004 cv298.953 55.4004 298.218 56.2007 297.802 57.7686 cv297.481 58.9527 297.258 60.2964 297.258 61.2247 cv297.258 62.6324 297.897 63.4644 298.985 63.4644 cv300.17 63.4644 300.97 62.7603 301.481 61.2564 cv306.249 62.4405 li1 /0 get_csdsepcs1 sepf323.625 67.4004 mo323.529 66.8243 323.497 66.5367 323.497 66.1846 cv323.497 65.6084 323.562 64.9366 323.657 64.3287 cv324.554 59.3687 325.033 56.3604 325.033 55.5606 cv325.033 52.8726 322.217 51.2085 317.77 51.2085 cv315.113 51.2085 313.098 51.7208 311.529 52.7764 cv310.506 53.4488 309.93 54.1524 309.226 55.5928 cv314.377 56.6168 li315.018 55.4004 315.785 54.8887 317.001 54.8887 cv318.121 54.8887 318.825 55.3687 318.825 56.1685 cv318.825 56.3926 318.762 56.6168 318.634 57.0645 cv317.577 57.1607 li313.546 57.5127 312.682 57.6407 311.273 58.1524 cv308.714 59.0484 307.306 60.8404 307.306 63.2085 cv307.306 65.8643 309.386 67.7525 312.329 67.7525 cv314.569 67.7525 316.105 66.8882 317.514 64.8086 cv317.449 65.4483 317.417 66.1846 317.417 66.6324 cv317.417 66.8882 317.417 67.0166 317.481 67.4004 cv323.625 67.4004 licp318.058 59.9126 mo317.897 61.2564 317.802 61.7364 317.545 62.3443 cv317.129 63.2725 316.105 63.9766 315.113 63.9766 cv314.314 63.9766 313.77 63.4327 313.77 62.6646 cv313.77 61.7686 314.218 61.0645 315.05 60.6168 cv315.753 60.2325 316.201 60.1045 318.058 59.9126 cv1 /0 get_csdsepcs1 sepf336.608 55.6568 mo333.76 55.6568 li332.8 61.2886 li332.704 61.9283 332.672 62.1207 332.672 62.3126 cv332.672 63.0484 333.216 63.4644 334.145 63.4644 cv334.592 63.4644 334.944 63.4327 335.616 63.3047 cv334.944 67.4004 li333.568 67.6563 332.8 67.7525 331.681 67.7525 cv329.664 67.7525 328.513 67.3365 327.648 66.2803 cv327.04 65.5762 326.752 64.6807 326.752 63.6563 cv326.752 63.1446 326.849 62.4405 327.04 61.2886 cv327.969 55.6568 li325.792 55.6568 li326.464 51.6246 li328.641 51.6246 li329.504 46.9527 li335.232 46.8565 li334.433 51.6246 li337.28 51.6246 li336.608 55.6568 li1 /0 get_csdsepcs1 sepf342.936 67.4004 mo336.824 67.4004 li339.48 51.6246 li345.592 51.6246 li342.936 67.4004 licp345.815 50.2168 mo339.704 50.2168 li340.472 45.5767 li346.584 45.5767 li345.815 50.2168 li1 /0 get_csdsepcs1 sepf354.958 51.2408 mo349.519 51.2408 345.679 55.0806 345.679 60.5523 cv345.679 62.7925 346.318 64.4244 347.791 65.7686 cv349.23 67.1763 351.15 67.8804 353.454 67.8804 cv358.767 67.8804 362.767 63.9766 362.767 58.7286 cv362.767 54.2168 359.662 51.2408 354.958 51.2408 cvcp354.671 55.0166 mo355.854 55.0166 356.526 55.9126 356.526 57.4166 cv356.526 58.8248 356.238 60.6168 355.854 61.8965 cv355.374 63.4327 354.767 64.0406 353.711 64.0406 cv352.559 64.0406 351.854 63.1446 351.854 61.6724 cv351.854 60.4566 352.206 58.2803 352.591 57.0967 cv353.038 55.6885 353.711 55.0166 354.671 55.0166 cv1 /0 get_csdsepcs1 sepf370.812 51.6246 mo370.365 54.1846 li370.812 53.1924 371.197 52.7124 371.933 52.2007 cv372.925 51.5289 374.205 51.1446 375.549 51.1446 cv378.205 51.1446 380.028 52.7124 380.028 54.9844 cv380.028 55.4966 379.965 56.0406 379.869 56.6168 cv378.077 67.4004 li372.093 67.4004 li373.661 57.9288 li373.789 57.2247 373.821 56.9366 373.821 56.6807 cv373.821 55.8487 373.341 55.4004 372.413 55.4004 cv371.165 55.4004 370.396 56.2325 370.108 57.9288 cv368.509 67.4004 li362.653 67.4004 li365.309 51.6246 li370.812 51.6246 li1 /0 get_csdsepcs1 sepf406.237 58.4727 mo407.325 58.0567 407.901 57.7686 408.541 57.2247 cv409.917 56.0406 410.717 54.2486 410.717 52.2325 cv410.717 50.1529 409.821 48.2969 408.317 47.2408 cv407.134 46.4405 405.533 46.0567 403.262 46.0567 cv393.981 46.0567 li390.397 67.4004 li396.478 67.4004 li397.821 59.3047 li400.35 59.3047 li402.237 67.4004 li408.573 67.4004 li406.237 58.4727 licp398.59 54.8565 mo399.293 50.5367 li401.533 50.5367 li403.453 50.5367 404.445 51.2085 404.445 52.5528 cv404.445 53.2247 404.062 53.9288 403.485 54.3126 cv402.909 54.7286 402.302 54.8565 400.989 54.8565 cv398.59 54.8565 li1 /0 get_csdsepcs1 sepf426.78 60.6807 mo426.94 59.8487 426.973 59.4327 426.973 58.8887 cv426.973 54.2168 423.9 51.2408 419.165 51.2408 cv413.82 51.2408 409.853 55.1768 409.853 60.4244 cv409.853 64.9044 412.988 67.8804 417.757 67.8804 cv419.965 67.8804 421.82 67.2725 423.549 65.9605 cv424.828 65.0323 425.404 64.3287 426.204 62.6963 cv420.893 61.8326 li420.284 63.2403 419.484 63.8165 418.204 63.8165 cv416.797 63.8165 415.837 62.9527 415.837 61.7046 cv415.837 61.4483 415.868 61.0645 415.933 60.6807 cv426.78 60.6807 licp416.381 57.6407 mo416.7 55.8487 417.757 54.7925 419.196 54.7925 cv420.349 54.7925 421.181 55.6568 421.181 56.8404 cv421.181 57.0328 421.148 57.3204 421.085 57.6407 cv416.381 57.6407 li1 /0 get_csdsepcs1 sepf438.828 56.2964 mo438.38 55.2408 437.452 54.7608 435.853 54.7608 cv434.86 54.7608 434.22 55.1446 434.22 55.7208 cv434.22 56.2647 434.732 56.6168 435.82 56.8086 cv437.42 57.0645 439.564 57.6084 440.269 57.9605 cv442.156 58.8565 443.148 60.2647 443.148 62.1207 cv443.148 63.7525 442.284 65.3843 440.876 66.3126 cv439.5 67.2725 437.58 67.7525 435.244 67.7525 cv432.748 67.7525 430.765 67.2403 429.229 66.1846 cv428.044 65.3843 427.5 64.6163 427.053 63.0166 cv431.98 62.3126 li432.492 63.5284 433.452 64.0084 435.309 64.0084 cv436.524 64.0084 437.388 63.5923 437.388 63.0166 cv437.388 62.6324 437.036 62.3443 436.3 62.1846 cv432.557 61.3843 431.725 61.0967 430.732 60.4883 cv429.261 59.5284 428.557 58.3448 428.557 56.7764 cv428.557 53.4166 431.404 51.2408 435.788 51.2408 cv437.868 51.2408 439.564 51.6568 441.068 52.5528 cv442.38 53.3208 442.956 53.9927 443.468 55.2725 cv438.828 56.2964 li1 /0 get_csdsepcs1 sepf461.003 60.6807 mo461.163 59.8487 461.195 59.4327 461.195 58.8887 cv461.195 54.2168 458.123 51.2408 453.388 51.2408 cv448.043 51.2408 444.075 55.1768 444.075 60.4244 cv444.075 64.9044 447.211 67.8804 451.98 67.8804 cv454.188 67.8804 456.043 67.2725 457.772 65.9605 cv459.051 65.0323 459.627 64.3287 460.427 62.6963 cv455.115 61.8326 li454.507 63.2403 453.707 63.8165 452.427 63.8165 cv451.02 63.8165 450.06 62.9527 450.06 61.7046 cv450.06 61.4483 450.091 61.0645 450.155 60.6807 cv461.003 60.6807 licp450.604 57.6407 mo450.923 55.8487 451.98 54.7925 453.419 54.7925 cv454.571 54.7925 455.403 55.6568 455.403 56.8404 cv455.403 57.0328 455.371 57.3204 455.308 57.6407 cv450.604 57.6407 li1 /0 get_csdsepcs1 sepf467.53 67.4004 mo461.547 67.4004 li465.131 46.0567 li471.114 46.0567 li467.53 67.4004 li1 /0 get_csdsepcs1 sepf477.211 67.4004 mo471.227 67.4004 li474.811 46.0567 li480.795 46.0567 li477.211 67.4004 li1 /0 get_csdsepcs1 sepf497.05 60.6807 mo497.21 59.8487 497.241 59.4327 497.241 58.8887 cv497.241 54.2168 494.17 51.2408 489.434 51.2408 cv484.09 51.2408 480.122 55.1768 480.122 60.4244 cv480.122 64.9044 483.258 67.8804 488.025 67.8804 cv490.233 67.8804 492.09 67.2725 493.817 65.9605 cv495.098 65.0323 495.674 64.3287 496.474 62.6963 cv491.161 61.8326 li490.554 63.2403 489.754 63.8165 488.474 63.8165 cv487.065 63.8165 486.105 62.9527 486.105 61.7046 cv486.105 61.4483 486.138 61.0645 486.202 60.6807 cv497.05 60.6807 licp486.649 57.6407 mo486.97 55.8487 488.025 54.7925 489.466 54.7925 cv490.617 54.7925 491.449 55.6568 491.449 56.8404 cv491.449 57.0328 491.418 57.3204 491.354 57.6407 cv486.649 57.6407 li1 /0 get_csdsepcs1 sepf505.097 51.6246 mo504.456 55.4004 li505.064 53.9288 505.544 53.1607 506.248 52.4249 cv507.017 51.6568 508.265 51.1446 509.448 51.1446 cv509.608 51.1446 509.896 51.1768 510.217 51.2085 cv509.513 56.8404 li508.937 56.8086 508.681 56.8086 508.36 56.8086 cv505.864 56.8086 504.776 57.9288 504.265 60.9683 cv503.177 67.4004 li497.192 67.4004 li499.849 51.6246 li505.097 51.6246 li1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Administrator) (Write Image)%%Title: (MS_AER_logo_pms.eps)%%CreationDate: 18/5/05 1:54 pm%AI9_DataStream%Gb"-6l],5lOXBi+nIG)e#1?nInG>Xf/<Ca;g!eDd8Pi"F/dMQ1b+^/a1<BTuMAkm2O*u1kpN%OA;I('j+2s>!$k#:Kgs+*gmI$Tp%G4Y^fG@/(4pZJ%?s8*VQk`70W@nuQ]H9Q`Mg&H<oRl=^CRU#Ls,MHFWj=<(t=$H=E:S]K_Ju?Y,h`lMco]Fsg^]*a%iQ]t]TADfH%s7#\7N]3$&+9$T]m/#W1+7A#M^:AaniT^"oa*QhIMgsYs^\dm#TATS+aT!%F^V+u=r:\;m^SZeDI/.\Vo^g]0U&KWCrV;q$^7hf/%n*>m-hgYOKq^6aZc[L<@bMW<aQZpJHqsj=DoQ+bmqN!</I;/A4UUr"HrY*c.dHA&1eeujcp%,NIs5qRuhgYOKLY(FrIK/_brEKR+%gG_o84hgpXNSr'HX*fjhj1k3Cg6/\VX^2-+q";!(0Bh"i><h7NYB$Rpn`m;Eo^]r=n=,JWhu)jXa8^D_nFkZsn%\j[T^gWP*sC!C%+27RKmJffrD96.mf%VoXc_9JF^]3HNa#>)hp[7E-KVnfHQOa#TrKhFD'u[f@5J@>f*Ika$9cn*=gXdPHr8nqBQM6Ht!XJ?]Va(.N%gS^CAs8M/5/.l4XX0:BmqsF8^4RO"LL1>Ajkca!nqcJn2KVNJ`P'6IMl3fbie4ZFt!RFujQ'UUb6k-p-nFk1Hhu2O<*qMQ$Sc%f/%[pMlcWI_YBs6q;:g@G8]s-I`RPe[%VbrZqirPNRRo'OmJhn=J3Gk%IJK0(u;mgUlI]A(rp]`,l)Q0+,,j3@TfhYd<k:oU3S1#fsE%i4ltc^Sd8]A&R7Zin#%;CQ.iMrB6a<Vb07U;Xge&Zml6]9"D^G5'oehhU/4L+$A@@>4mnVp_Wpf<i6U7SPFG#FM]]/'AD7!j4F2*%;Xj>W4at/\QY0jI10tiZ]MX-sPP0?^LX5Hs[)/@&?aR\?Co6bBAq^2Y%;(:n@buhGGntJ<J+3t(_LKssi(877N::2u)h.sI3T6N\%9mJs,@:&^^g>(QfB'Y)3$]YCKJgL=rSs5Ydk[j*92L.ARDJNc7j:>F&IeYRBOqj3abAX[qp`$=h5?hR4MEHgmiP5/Bfua*N^G9gp%n6`Q>r:"&r7A1@1X1TNm1`F0NNIG]gA:/uOZkC"h?=`1RHAl+K-1@+jD7ua!rBVCHc6s@4_p^AVq%`M=J'gmP)tO`5aKtXpg0f)Z%c]#/Hmg/(:%78l?_aZ.GD&Bf[MU6tB$X6QG]8TLh0(0Of@H=j@2E)L8>1qZ,GBmMDQTm6GfpP1OZK?`Xl/A66#lW')0$bM$Ze[Zd%QJlQ+^/2;drM2Y?4__u\qHRULnluEYa=rIK-T5eB2I:a6oIE^`n+[Fm(9Zlo:C-O7r*0/r,i@eBo&oLFc2sD`bF_u"qts[tZmO[7%ZZeA,F+#XTbeN8cc&I+CJ'4J%B=G>OR=EDP]0#gPs->ler"4C<[DRK*?0/\HPJ:g\+e;NF^NKAO^>@^*Hu`?h*U8'Js5/QQIig-\%jn.k]]5IAPLX/l1^SgPUP+K0R>PWIQ,XpM:;pecRUL3Eq:B`dHkB$:pKR[:N[sL59Drom.%-KS+UCVp..POJR0*hD%hZ8l&lE-$#%rmj8N;o7#YQb8MOV>l]Ug+W*JQk.Mh5S'Jq(5+E31]N%Ee%`CMj,i//]a5bM!R;-!U[PY"OM@o_rE&K4pl+CNr/NX;T,.n:pNSq%%G26>3jSBY3jm9n]j:RH^b&c/q;P#iHkZajTF]IP\gNc=OX>dlbGg`7gHc*G-(TX>`ptnO_f1i2t=)4lGj1*3U%#Ydgo=sr6e08#"%kJmoX9ac(\%ctIW3^12\IUPj41#8^aE=#TV0e#je0>Cr7k5*<8Aa=$1B%1Fp2`S9pU,\mV8&j3[^,K7ZkmR*SP\Vk9.eD:5r,96q%rlqLZo<u'A+$7sFg->G'pXj\9@f9O)p[]u>H&S-R[;m4]B?UW@\+R,Y`S\[,!&_J6]r^+r6g&OS:]@3fjYg\HfDX?>?+"rBpZk9C%boUZXp]!JKe$m'T#jGm5mP<4VY4$MWoN>73bc.@kGJ$[ql6J(O8Qu;b#p/MUP-]g;TY#T"I@m_7[D'!/lZu)$^;^i&./kh[H4I^Z%[fC0RFgq',rAWG4o6%R(Nr-GR-`p0o/a`'b`^]Rb/ICLLk?.3<*K@XOT3Zn5It.e5J(HbY.T+;.7X`Mo85&/tBaHAn-[l/G:M>HR%kW;NAGoqN'0@Ce(dfc0248%Ikr>5pr1X<VjJKRNf=t_J$(!RC>n9'b9!k:QIr11$*Qe_*aM3RXJ5Q[!P?l/oF-V%Q+3l)7(Dj8C?%o'?Y"q"HX0GY7hYOk);1;tsR9,iA.!Zs$NGj-WVU0@qs+oU6Xn)04E<XfSn,Gm;)"cQ_CdN3.j7K?f.Q0`T%'9udTGL3oa9i/Q>q%YU!>h+)T\a\qhR][K-V>CcuA'Z5sjNoeOQ3Hjqnucm1,m%mQVR^0Tq1r<anA%<#c\j7O[40")\L96<&rmQJ]bakJNgbaX*E;=YY^%e*H\?lm@$bIb0#qFtj'BgYQT7e<\K_8cI@ePe-WKH2!\%6u/9q]LSQtFVJWu2OIYbX,;aLm*BI`H+N.IaU6+FJ2ujkHGJ"81BhYJ%A/F"XTG6K/!bns`n?fi2Ga%K@lOCIf`kjem8)[RU__G(P%7oNe[FO3_G?N&01R5l?jmU3:/V!?@GlC\,_O3lco9ZP.hsR(,ZEHL)%HhSg;9_,C9q^7d1^,F`pY<T[LI/djTD>]lQq>AJrhgQje1]IB/?bWGhDr8AFG5*B`df/b%a)C4?J,Sm9gTUVDh4NOGIWk\Oq`heT%rYi5K&+=u?NrJR8j3<?t^])FH\*r3=rqs9CTKc"$q!l6\C[4d1KA&NHs6SrromM/bq"XR/+'sHiQa[Kl]"db3GgCHWIe&3eO0:d\%R=4SVnb4E'r;;+CH"iMtT17u[T(qpsrr2Q1pQ'7-I[V91OSS?p6kQe&O)Nm'q=Wr@^<V;CI/D<ATC2(>c(EjBGZpE!Tm,rh^3P,+%eUkdAH2[0Sj+"fBnC;U9@W[*GqsI+ob3.ZrrT;@0kk@k[_1Qb*r%G7g!r/jnlk%l6li)/!iY*7Y*H0dd5QC&)f3c7g/bt=bce-;.%Ii\R\0AQ*kld6`jn`J$4mgoG=TRBP9p&9&_6en9__>AOcmdkk<O2S1!]t:nk]=Y\g45J`J?/P=e7NASdjh#UNn%tX1,>N6*GC+[`%]"PYf^?rDs5jChLc*upqhM,5F&asgc\ilTZ2lGt?5IFEQPuBlC;`obt57t65\\#Dc3SiKG>i51CG#N>%9tj1XnL!&d)g<D:m-a`D%qK..,c-5so?5MUekrN.+CO](,@))$:rR>cLbjN1;g.TaTp"2Y+*I@Hc]5=Hh6]ub6mEfSu/JI<,/Mu@@9bQ?tXf$JDYA:>Dellgk%WC@NnI<FYcgm-W7.Q?J#o[6>`V<!e3/>;ju%f&<GjkG1*2oN^_DRnnm1IN?`$[a;hRI8L?3i/<fSN8`Z.WfF''N7Od\Tf4bib^fs%Rs5s#Ckl,&M)hFM@u)1(<k&OHi=p1HFm&j08g/m5Kc!/G_>/G-k=KF^2u_NThgG+9B:jSD_0bV\NY^'j>.>MA#]hh8<u_[n;;Vl'%YlFUYNh?:/joa!6g`4uf#n"c:LX5t(5]4;"Gkj7H*T-+jS(g6H7Z3VToCS@[n"2k4q@@nb#Y@'$8jZ<^'P0atr/(7Vr:0W'nf\_(%1E,@rbFauID@V?Q)oh;'@otoh5F"H%5?U5A2Z"0_j7VFBdG[IYEmJMGT3M8apiE4&C]/AS2#XXb8ZO83HjHH6b3\bCAqZs+`lH2V%(0`tHr41A(M*Erq\NUQN>Ve6ZV?lusr=o6Ar>7;$G5=*SN&pdEHdL,&e'T2bP'g%$\`(lBI_'tHJ#[r)J$OOO_3RhmBsY,^1/\%h%T75cqb+J[p0M$Zkh!RA(h<3qeF)@Q:(7Ce<p8PZ"fmRre*QF,.HYU1%jsQ[Ip4$c4#OgeFpYYhXgO3s`T@<d\d#C(Nf=OgCqm>1W%Y+NVafBXgQ5&'bJB-5n-iNV>E$U9_;6jd7\.O#f7&0*g[`cJNeI7aJ.*:86"dU*7W0*h#3l,RBf3&'\9ec_=oC-fQcMCmG>XJd_T%/\I0tP0#t`]"7MYFD1;\FB]5Kd73B/"(Z&serbr&>KjOICe-^[`e+$h^Wui2d3]*(erQASE[oc\.4;!`T6?ft%XbqC@;CWO+2rl*%CnJi(m#R\$G/E!j?On[fQoJL5JHuWBq@Q<Y<^.pDYgbDkg5m0^4?F3Ym#QrY/D;dB@mUI6n<k*(n\X/P3o9D<H!Vl":>s1UN;O>6%)^tE=dDQm'#=]RBF^i#=1EHVD)mcY/\SIcFVJsjK%Qm(:WtP5Pg'0LC*H#Rqg`M=Z4Y70qGa\8"V>UKXaURX8>M<0Q7%^':/^fS5%mCQ!fYL>\JTsNsKcD5f]>>GVFl)`$LB%6u(?C_S2)`l2\ktnu>P4l92OUeusLL+hR%(`="n3eY`?+VI^pI#+G:<Q>/Au3t_dj]T1%Vs,e(WqQbP".k;ndW(c@fS(u^_f\SlnLYd)pTuqC&P](m3n(WFl29skNo/3/IS8l#4`)*5e.h/[cZJU,!snsu"G%L)#]<3fJ1\\Q%R7.`*1'nH`[ZM8D:"$rdrmohNg1R"u09X898b/f*JTR&CDFbt^-->6IJ.2e,,a!clFq=%7-W,V)9k)B'rOn>F)]W:,K?4A,*.W84%f_BO2O3N,UG.R']h;>fSkI-sdH>_lMO_"o1'@6&-2stk4cHXMdFR7EBmaPNfctteP,]CZ,'=U&Bm_8(kj4u&Om4`^PmBXm,``1c^%Z9d6<mLrMYBUl"@+%EVF-nrINaWGcBAu9t&IV&Ar%d7&sKf?XX::qOM+7Qi(?/\a<#eW6nW&"\NUTleD2[d&ek:M<\F#-T!DsGtN%!q8ten.:+qLaO8+%1cH&6J[Vc<Bne[d#7aJ0`Ce\g@NPmebPBfb^8KVe!n6EDgl#(^8*ISiIAA90BW_cnu#IK78l242!+$2C@YEF%?cDiCnBQLn47W63H@/:EITA<im%i]8C,++oEJiYC4f4"*6&#@u?c/<7+W3SC=$Fu<oLnV1A`qLF]B>@Ui\!C'r&UrIWUE<?qYI8M%s6B:/.gr]>=dZYemp^#-c0Mk-rqQJ25<k*V9j?(Bh"<&_Wnc..RgL(q&!t>GiqVJfbMufHr:%VcnZ=d"pu1f=<ZF@%E-Zg]NZW_[%4MDQN%i=?t4XL"^J+iSn:OEYEr&K0!cf$)CgrT%^Ih%sOHgArNp`)2HN?A!?1-]$J3doW+R3Cm[T:`44591Pu\',]-:M-,hbW+Y8%n<5K[:YaqWDQsP8Ieq[pe7COEp)TY\U'9*`KkLiph8pg3FMQ'hIldI$[4uTmZuP<5@*o0+-u8qe<\V#T'==0ss*jh!(N1?:huE*=%hi>JJnG:t5h].,5^V#"@FmbY>kT+)$&e)+HZ0*]khQuFh9R:-rLC<,?5KfuYZKf?*7/VtEqB%EW_l&4d:GHVuETGI%k&\.^:<Vg4%q-5SFDP%#P^A4bOV_"IQI+%f.jeJ]J"916Q+?'5GFia1#mIE8sc]*>_b^]$/QVUgLFaV@0XHLBff3K#L^0fM=$s)[dcB@:9JIu/`%nPaes]7c,_g:"q89&LtH`BLq_pa`)WphsaX2:2A:0]+LQaW:EIn,2j.dQdaR!rhSSNrO+srVpoY0,aar^X;:0n__j:9DSm;AcHfK%&#Xolj+%(9s+Q0iWb).TnZUiTVa'^dJ&CX=?a[Y`0s%a_jEfpZkV;u287)PT`Erf#a7&TdjnLj6/*-!Kn+Ll^8EG_rI^'+NFZ,'S%Wjn@rJULfB"<%sP@L_tqC_/?2C.pq.c(BEZ1$(+nqmnU,XL^MTYcl4UBLl]p:qkW/5T0+=%42==ckZIH-_mTK:"o]t[am)VU8L`?%!Sb$$SGf=]6?_`M2=L+5jacaPg)P.GlGPJ;o:f6d/VUNVX_eMZD>3X*gDXnc<bAVF'Ze"Zc!bI'Y^K`F"20o:mHqQR[efg4f!Y[X%D>3X*gCDl=Xit6kWK:CIS&<s#^ijR3%d5A.edF;V0<EdZemR'P5HhJs_=h_W(2HQom+^25es6Np[iKO/ZAtFI'"%#'[5K&K,u+-?%>+:Q&g,@J1/.Ha,[`uheQ\K"P[S:J:q-KhIT,*M-NBjtK:TTNa1`I#=`*W#ga?[(oY?.:'`S/Bu92G-=g6)<^%J8?kD2$P\A#<t.%U()6^4(,\/2WD.3JF2(E^t6!s[dR9EYj#1Sg2]D6gJdF^N(2.EASGqaIG9>KV6.T-D/B<>V@'Vpqp?<p>=WJ!@R&SSm?k_mXl4YE%3s]ZSen21q*OFSr.pk6kl=Bd8"5>Bn/6Z\@N?$FCbgs3,gUFRnXDJETDel[]gD]F[?Q&j?>6.mMrQM:Vl7.^NaV$D1(C4hk3p+"h%C3*LGNiDH8g(]jMA#B-0AI<4N3_sVf\9n1/Aeha%n)#/R7(PkePK;;kV<ub/GCMps+@O!!5E?+[0?IML?S2%sc1l>S4qdY=f9:WJ%mR24N(BJN':YW'O8GC.hs7kDGak^eZGN*#l=K&J[l\`_Ti:"*:rQ65:(^[sTC`:fH`N*oO._iXGD'OK`QhdY''a]u*r'CaUcH]qn%Z`>jr00R^8.Ii&GLurtVGsA0HN-W,H*CY;9G"BP9j(oCVE@BQR@<+Q5NG'@sDMCQCV^Hn]==WpAj`NB_2s1t>pX)iG/@@4A65jU9%-)//;?ZupIp!HhD'.?sChe'2_9@,iQf+fr\e?<U2_4MR\,0*^KcBDpb<D0fpog!Qm<=OA:NV5B3>iD^$-tB<jJlge$PsNg=66.;G%6"0mPca6Ar,jak1aMDHP/:3r`MN3W=Oj%uKWsjpeNQ.%c;!'SjnI"9U=4-=blW'T\JhPA?`_'?`X;>XfSC-b]`8n+"S1c.."=GB#%%\esFHBgY8IJ#)_3W;:l=iU^S-HcS2G0n]dG"2*(m>(t9PlGBp[Bu@;g#i".YoHUINn]Y[JMW_(hJ>NZgN\=\7cTN)Hr<JFc7opA%&RT]Tiqg*8D7SKGOcLueB&7EB6h$[]$a6pdGb^"!.n;6;Ul:WDhNWK<LsX3jKqD>uZ>kcLM"f3CME9^9Y?Mb-ZF7mQ;!FJ$AZ!M2%B<05V^Hk0El-KpETbg2@DH,.>S8`2MSRB5K-Bq^Zrk;liJQ_@#7,CDDc7]IHoOC^KLV?t2!k,c8'tV\%*P)L,o43p=3:CaM_6G>b%,lgeNhY%)0npO:?@68S8]"UT6Z,a6Yd/iXf3p?YCVC_uZhOc.F&`96YVd2f!\@N,1n9Gbl[S^2[pli?3J@$UaiT"Vu:7COPX1F^'%";Ubh)FrtS#,n.#(b?"2aCUt+6.T_u7bHt$JWpqcdZXo>lue.lQaR9gp`uU`qY@k3ZR.C2_BNLj"!R+<%Q__ta8spc!$M(KO,Uq'%fjj(>TG-7H<dq,UQQ`d(qR.O\kgHjp+i33\[-Tgr1N%Jh&H+pF^+Y"JDgLG[g(R<22hT7HX`NF-CoJ]r5\aM-V+:YLopCWECG7LU%X'0a.d<-34Vq5E8G?s>?0;Et7l`De_ECEB0Ll&&B-hD"@:UQ)QBt[V)*""ZPlLIsa,4JoVj/jcP6AFV"Mm>m+K0!/2\A^rWgI[*V%!kR%j1;&cuFp'8BDc^.FC>;?SA\X^-'d7G$_&a"nb84k]+tK1</0ZuYUV+EDaKe9a?jdAGVEq]-QLLWjYJ@6Y>aUjY6;\,;,\iLE%Yoth6LaHUFc5sig)qD!pSi1TnDJ+fY18#JfDDM(6RgbJJ(8X$m-uEeI>S6Fg*cC"oJ<1."gkZ:@1EJk@2SiFCk*'WoeicJ(_HiQ<%ooN9,Bi@"WSV4=?!`dk]S4"@NeQG=@<59e'/r>Op+JDV]6ujX@7@Wl9Ur7%7h:bQJ:>`NoB7cUdkCY7%)/e+W2rT@+PBNs#\>7eo%EL"iBR^1IGd^d4m[]5.uTS]JHNoA=;^'ab5IdNs0=tba0e8?f*;mTK^<tV#"fZE?Qm]8adMVg;[j_sF&&\qDNVIj&SRTchf[0Y"o%paS/M.p'!DA^lufW#2bd!K"HO)u"r0QTT2mYW9=;X'nfffp1M0TS77s(!HpC,aF$?O**eoUr]6Rf);1neaW==DIR>?[nY<!ih*W1%]R9>Ij.!65095e1+!6P.5O8Dem=9Lb8S]SG(WBbm5L:K$]s-$qfCK4?]T:LW58j7hJ%a4Ne$GVCj-RXlifCSHRMOFbr)[%JROa_Y%mS5?1Up7oBc-1Cc0D)XVrYcGeQ<3WRaLTdB\4de^M-JM1;T`Go+BV46F94L>O-@pPb%4J'Q5so:Qtebs<I-^+d(XUDef/$_+35jn%9oR$LTVVPN,4+bUA1"Z_BHok3./EomKH\8)i+X,A06KG<"g4)CY<DYU?P0cbmEl"'`N,:EH`),L1]`Zh6+`pU8=0EDT7ka,oZ/dY%jW8c"JF!QjfF=eoW41Ue)%_?[QjkWu6_/K.P8RgqX"(G&[eUU&0ChB&):2b_aQCH7Y^^uKpSJD`,#/4C-%YB99)Lq]675>)B<7[A%$4SN&nOh\[8SiGp7[09]ApY%c(pOS9VO,4gcV^L8bYt5'$h4>qSoXPq8A&tF%1bN&n-MRCTb.5R;"Npq*+?e%LsbJb^!q0Pp/4gt%+ghpMnOT<C#fXNt`nqr+ko0-hG[342FnTq+:dQ>rJfu>dh_]H9\&gEcjD3c6K@rYoEJZeW0IZi/_ZNk6$se]?VH*]Whk7#scX*$,%`.<HW,<dhf;Yi-c;.>OOO7]8VW$Kfs\0'?X6\Gr5Y<J,U%%jEu[4=;X4El_P+U;.$)]DRJ7H+[jPZ@nb2Hb,g@csjaCVMJsKE.@K%$2,M3le#p46-JZ&\H7-_e]W0-9YgIY%IIls40&Ak^C`J<3;2T`DtFt%#+a=9ha44R[Y,2-M-2tt!W.c9A=8p:DR/B?+X.4I^bnt7%\.!O7N<1&@a)k(rTV.XncSTg%(P"gmBKtG5nUXd!7r3XY+D+)>d;WoQ4G%>+Qkc/9Xt&sSek:(AZ8Mgn^7_pJO<6tDOC1aPAdD,%%Af*F_$D@a)d?$Kt#lu)fAp01U717^q4"B(FN.j*-@_'PT-@N0O&uT6TYQumiD%-WYNX?t7'2WbS4F=;$(:+mfWAaJ?d>2@6+;)JB%7Us97'^65X3qtT&;s2Tk!<^0Dk?sol<^R-,U;g1LJbKeS,S(_$(MFOd<fre?!(5#M0t$_Rm%m#Yi<R0b6A@96gb&r='XkA&%@pHn%Bn;b#==fs<P\G@#D]344A.kG6qQ<cji1T"k$2bU%.U?Y]r=dn3Wn'<h3F^H'`p%4#UELiJe5d78XoW8qb2<R/ThsT)(_Z5i!.IE,%hKVp>e9)B:bt2"c2DY79;t-mP2Z-ih!Tr#"1l-/@&Os"cR2,8^K"$:jB[%R+*fXtU=jSm4P77M'O2!(,hQ\'P_%Y2%.ls)u9h@As%MY`Pu[t1X&>Vl!;HYKeF??[q7,MqE*b3A6UJ7XHfcW98[d>$4W@7#oJL0pKaV4/82&nS)U"VXWuI\mLf+qYi1%F,9C&^[m#S2J6T%E>I$k8^NdCFGRDg>jPp16>c3F45'+*cKb3BMV\UI6MK9$p9b6shX_]H6O?hU"D47L>?*?$0Sb:S3iKtR:uHu?UT7I:K_lbAiU&aD%oiRBs/=G]2RTmstho=*dl(D>hRL0lU(_$U\g(@d7K%uH!`s+Ofq%47/=D/kR#&Za)K9$Zn[[E3gfR[7AoYf'"=Fj%27\X>M-QIcc%Vc&_l9h2#bL%?OrTX9;aK4&5u''-i[?6_q]QFU,0.Zgqsd-6u-Ud]qlJ[m/r"'Aqu6Y";"1C\bcO+R]Bk#dmCJOl6DpC=)&FUrBn%A/9TFeejrJ'lA")Ten[d25GO6n-?VF.9k%gDO-,J,Z<p&-@"4#Mn'sZEW07_(k)\$T_"it.sl%m_Y2=[=CW[)"0N(JV^^dR)#_Bi%P%PS2W^%G,8Rca[,\c4aJhVLKFXN(j.&Me^CZIU2$Q/FQqS6Et._tUj0[nT@=!pUk,74,#d.\5FW+P-Q:C>P'+C6*C(+3doI/6-q%`#7Cq'X)OJK:h]Z#(rS7H"\L4n+"W\Q",q"B[>]NcS6Ck.?^]I#F9co]JtRog5LE*(nUPF-P"\[2OL]\@@V)NlYO+G'RYWF'&Y)l%?b"ZK>N&Zu)-s1/W/m2$=<m7P:I/(+p]Eo;/2)BIM#>,phi#loBMAnQ<Tl@F+H73NFq\^)5/tr^Yi?J1\aor>@=qAl&WAY8Ah":j%]]dY*#alrN4,!.^)68GfGhhm6j%hLU5+IGo.t2s\7@f]%hAJ^CTo%>iJiEJA.sXgq2Qu'iSlmb+LTjiFW!iNg86TTW.#Ju1J"V.)%#AA!O:3)Og=EP"g^%E8oh4Q(P+GhR)cs')QDS/2aJ-=Q1<>4CqI:L_aLpm\KKV9Fl$RUQ:!"Ra]0m*LH*:tR3bUP(^>=&uR!j';9%Kb6^9A\hn-G&n<K%`'<fZ.d96*$"7cQILa47r8U7`p<gN@V/)8H%`9AJZ08.Rp*h3*4Vs9XCJLbQQSG<p(ak_7jQ)pM8"aF3KRAZ%*LBd:X=>5i@&S+=W?IKb<ol*&0sb5;<B6fA^shhJb/$=K%]jC_X)bQl*!A>jGXariA("a+R%YJ<U&2tI?*nRQZ9oIA&Jttc43e;6%Ep*R`:=k]k(0FpHpW;uM%_QE3J^EIkjOpNf_>Xr272gRaCdh`g)C)AT%>([`d;+!f8ntHLJ[;/6`I(I;AtE*n?,CjtpF%j[eRSde%'164J+f%RI,bE=b<oic$W.KM@+p?B9EY?[@MB#AEeec"JEkG@o4N!$rQEtP69bs6uH.eZMDAFQUg#<k^+0dQSnuTmJW/PNTTSYpp%j6nH[&=[&j/tmX<cS/9E\tbg'R.3G&K>\>-]nZ2>Ghe[fS1&D3:%JB%7$5CU6.[2p,DnY<28n^X2$PrQCpcDb>-tj,@F8%)L\b2B%(R?]B1NAkt(R"GcT+cpXauSId(,RA.TNEosbV43\J;A5j=@jVan@=cdJP0CeKskWYGXXe*i'W(B/.,[9/-E(8aI?f#knj2bHA=9;%TsPNl4VuYp$>G[YB5b","[qAc#_IW&.BkDT;.7@Q!Fb"rh[k\q-uM<]cuGI/$OV"JA^tZB7q$2#=HP3J)?N>Ol"ROf?m(Xr`7P-P%2oH=q[VL8jG"bIK@,91Q;&7Ose6e'dMQhFIYn/Wi.IDLc,&H.5Hg0(?G8O()Lo&<YH<'[rjTq^VUj^.V(78sdRR&4=$&$A5CfKNp%E+Gk/#f!W<:F+0uP5\N0NjpZS;:L1L8Q^9#$Np\r@VV$b1orWL_ion4EFD:t/PI-o=I>fqoL.^GWmlSb0lOLc&E7/3@51-^K*d9b%qdD^)`KWDc-m5pP`%"H2.K_m9#QuUebG\aS%b7)&c0M(Fhh+O@M8-s:!=t)a6ZoIfYh+SpSi+mq_Z\[YAqJ_CSJmO7>"oBFTRIFb%m&:g>G<t+Z@(hPsSO#_&H5ft<UOel<fu&$-Pi?68+=]\!_M7Y?REck6!XiVu3;D,_1lGG4MW@a0Fk&JiS5Ic_-+nu[Md@o]1q]2U%^70M$aWs)/VL8VH8o4IZ0V,mLL[EnsA29F1j(<ZY.NM$Xd(WY*3Z9i3S&'2-KTS\//?7/6VU2]tkmBh1&r'.O4H?[a3aGTh]IJ'R%-F9YD>$^eF(789,6#J.YRU0'(#>a4K3r#J]W-PJreKeV?Wn1)e;Sr@Yl_o^q[6"()#n\,Y%P7rDVUQcBZ'6rL\sd%nL`<J!6I>%,%BQ^_?.E/YT"=fkNcied(8YVER?3fpqWC*f*CM9\*C0ahjhpf4E)l*!lXTJoePW*=t_(%(q1qaAY)G2$`,^1%`8mUP_N\IiO$JS;b%6`WRjACQ0u<`cQp@iAMkO^p%-%':#"?cWh[<`ck'rhe3\0Yij+<bF7rC3=LCp6\OS"50O7LK93!FAQh]3[3HTX(=mD&U__X1=PLq%R%9pE[5u)g!34N`(u^2AZVjkt.#4cao>"b%E`9"h;"A?>=ri29]"LS?3^e5_Hr[5BDFlBMZ\nfP+DnJHGR<t@l>YJ.m"\Joj"aEY%A>QFgRD8$/#h^>`*',*dN,_k^0YJh*%[@M0F"s[eLId&lg8V&nLhLJ[(TPmuE96GIHTl!<l(@WaIf@TI[pQiEqWEY(001g2o+>Vj%bo#^Jmi)%G0RkF]rP"IsF7&S@^2(4E:Y`TrJYWIRq_"I8ae8jlhuWd<K]T8O+ka4-+>:eDBs[:F4ScPeLsV8=+uD!hg'I+ikE]E_%YVq*?0jF.Vok0BFk!]JV)pud6oYKECKC-97%'VVk?_8qFgLcgi2dlfiNJR=F-YrcuoF,SbkJZ4(^[Q([f$DZkq;uVUNYMNbK0*Dg%s8VD'LMm_&Gl?0$6["fQN_/Y-,t[h<5%:Gk:[<46PqV[@4nH?eq&\/Vmq;\r#4SYq&dtX([K]l@5l6jL%"3&7$5//>5:`l^TVtS*%Gu8/#*XC7Z*`)\$@$$)`S"#l8d@h6DP_S!_L08-jLFOCQpR;ImL\BOEQdL$V(?`m6l+251jZhbGGb,$JifG!5c3cO7Ee>-*j/+K`%XC>JGhn7f,K`6nu`)r3ca`a<Y*$Wu<!mB"tmG]>EU!(#?"'p^a:irsZ6/Ibm,$G:]MlsY/IiT2?Gtb`1quW"QJL/dp=3B2k(aF\T%c#81:,LZkj*01cASe>io2GIO-b$1u>S&43ZBKU3:3$"\`;tb1oN6[o%:W"Nq:"cJA;n11r5[+k^VX,!-/\_T)3/(&Q'r5',$g)UM%!D.fI3ah(>`1s0;T!q-=a9Do2YuCk)D$:5oJ7mWLp=g/:oLa,h;RNss6C)%=#&]?l56[7T*+T\%:3]&l>`lpEZnR:c<^nF=KK'IS%NV#]M3#K9`J:$XS%Y$Otlp;2E-SFP<MifDQa4@On"sN8$TlJdUWD2/N"GB1LALh8_I/`/HWR$'10(o#Ni_lEKfNd_5+.#W;YWoX^%@_]j4I8EV$7cN]9Hb577++ra)raYQ4cO[cPo]+8HIf-DLUjqq1:'/8oFT86KICD60^VbW[A<Z4k+(:r7!dV>1^cu&00sbs6_GA:Q%s/Q7=+2*E=kor1Fj01M\^+$,1,g$>b-h0,D%u9h4JFM&"fDIu"[!&&FS>0"#"A)(RR1]Z&ie$TqlBArb^j=1/$,U`-]#hI6#(W`3%U[jY&$+q0U*L&S)=L]sM&9c#gTJ04GRa?R%*3)qT#;s-3[X\Mp`6P[$Y/!NJZ\+ShaVi^o?_j#n`7c$G"i!2[/bHu[KsD6<g0>9F%L#*VR&Um=/H2K[YX,MSf$C.u?r():]$K_=Dknf&9V#q2p]_F8OARHiX"H;s]S*Q8i)^5>o'_"'f5Ku#Rm=\:].)9/DB$Y<kNThi3%j;,+0=(=3rHl5C.pC[i"'W=!5YUKUYf;>9`.'eQM_8q#8@t[+llp;:\\?Ra;2Fn&A(OE1ZbSUMnfI"G=&Hp3]1mgr:XRpD6YN)k$%=*cK]d`SIk'n`/UE-/f#F)2,,('9.gd]+9AVuiduW(4H#N<"eWAd.5eGc@d/%?_C+-[mmY9Lins!\B-I$,TV&Jtju.9aFQ0M^oKg%5QEZ<9fqRBH9_jXrk"2`"K%Mj`M=enO*2?Z=F`Rk'lpUCLa!3\M`gZOfR]+<%`,u04)SE.5^=+X$$3M^/^-A[cOQ<1l[("()<:(&%REaF/*tEd"PXOI;f]bq52jCi7ao[lgkn<SM[NW1E&GEE&,F_M3!aS$.43cbGg($B!L6e!ChR+qU<c*2S^i]Vj\r:cT]$0FJ",7`H%n9A;-ibl^G<YeZQ<3Y^o(Le1'LWsXc,ZN-R6ljta2t94OHEHH4fo3^sL)W$7D;,hqgY1rrDFQ=qlY&ellb(M^TZBEP^NW9%%steQ%#Xslb"Y@GcWgA@5q7Hs\@0;hgE7fe'VI7k'Z<\#\YShum+-a1=[<9q6YK0BH9<T;m*5M]JURf*$o/ad?+U=\H_A>eFj"rQ_72*rb%`EOI5pscig@'?Yh].OT`1&6A='jKW3_"kT&PY7L:_AgPaLLed@[94K.%->i<O[rJ@L!1W-5"8(@N&%8\5]V4c<u5EF=bTl:L8b0(%e2)%/[@KPOnuWrX3X8cbF'$Hk/tg(gB4-jIZKr7!fBi48/6;1o_\Sc\RBZ&m?HuH/gAr^!3m\_#D-N&LQal@(!]M?ki&THCkq]:q%$n0N=V!PG1>ccVI3gE8U?bdk+&BbC^F=us3E+:.V?ktHU=Ah;"HU[R,YK-#9'PP!b&*gST*'Z!8Xh@KfAcrd[N-=p+bj,ZB'0.$p%`-dAnF\JHd^#fJL,#FENR"-/"YQ7c-$/;%T^^-0cjgaOiM.!U-j(8Du*/)f$^9*_-Kl+",\/E*_YG3,OY4F]lJKY7j5AQC,e;Y&Z%o0+hc(Mm_V4t&':^$U@\=eI[^!J^Il#)5jU#W%;>W$=!hFAO:3Fka>I&8g=j!,b:\_96L^YNrjHE+$cOVI^o@%KU3sSD%0]E)HG(%+D[o7@skC-E]?`l3MZs0kZ9#ZTLj5o.!i;$-t/[0>cT+Sq#UYC0Va`XJ!XCS!B(be?*&qk0]\t'E[VkP*H2^?Or:&F`l3hf,U'H=%L4Y=3!,bhKJ#Xu7+^an&3hIT<>"GL7=jOA[L?])cs5W'E=?JA,4%jir2<-&AICR:=_tFNOkS!NJSu"#o;1E"@5VOnIIH0s0>!d7h%C2(!VY)f4[_ePP^TI1AA]lm^f"3^M`6FHm-!4*>_0EX1d8H^t*99,h/dS,KL,XMOq7#;YHZ3HWWOE+@4FeD;/">43+TTUH4#&s`5%PKAJ]AH3.ga.X2iCT/d4J2(`\@?*g/-^u9@3>[=:D38T%RXo65&WcQ79GZ$HE&rKBdVj0*$$^.B#aga^%9#_Y;r^ZN'IBr"c1m:J%rQ_8OcChIS`1`ZG2]>d$;ADn;qhHR%R9AfDE?N*>!q!^+;roH)6UbTSA2h@.?Ei7_MlG3VG!rmhgU8]?AgW//!P&7W0dl/b=u)!q%WU?>'H;8ZXb-4`R>\B>8*kVZP2de!rj@O"mMCVXpG]Cj.@&>&io1KUG.NIWrVE4&VcmPYu'FV`kaBGlSYQbk)Z.'K5"Cq.MJ<:ru%i$K-K@&_kgUbH=*dHulND.5sROHp)WHE=]kUTXk1Z>#G*>b'b19;F:\Y?6](!$lCH53.M$!NHE]Pf5c_'HHE^5\tmZLI#-6\F5,k%qW>Wrj:8urX).S[OZ:d?)JB`#SD3PkE:=Q;J:hGmc\%EI)AUFg'J5om3W[0h33QFm_,?^GJA?Bn2J8.GCGBE,%-$p4[7sEU2W\41%/="f&/"IP"W,lKiVC:n.)HZi/O.,K)rus(eHJ;j:#u/]9VO:\EY\@*4&a>tt<D=74FE+Ei=O*,`fM[ic/<VW]FHh&t6/ef^BXqSA%gb3c!3E3#BQpq:#30-aa&L,@=.P%$2AnkB--u%?o3+fLeGtEOpBUm?ul9NG.60<E(0ZH(8Z*OQ:&eO?0="]2ID4NUBR#!3u8EVY=%)01kd\lWLb(E!qb)&a]LLl)q$'@b\4BU_CE6d0ZdZNcT+`Kgdql#"tOSUh?p]m5ZrQ^/ZCCEkrd,[(e!n07Q>C.`8&>#pXm29J)p%WiCdgLa>nD,WZh9>nKA[fT:og!NDX^?)b5Di2S,>Y&>Zl,<m#!J0OtI;=lRt4e(,6/WL?j?Bf5YXbAO=$(j^=,iMW+`Kq*8(%Ddg%YdEf7jB6X]04T^0==cEk#&PA!MBMDSJed1dq:nq9o-')o?JcfYimSI'f(:i8Q+ah3`\n(cM/0)"OiHSs]k-%'->NgTh%4`-A@\q5%Fg)qjX&eVS'msR6dA\FBd:UHt2_/>mRi(!b\.g\j0\4:lYP1bX-J?Zh?<<W-ZWPWnD6m;Dc`@`&(VP^;"5@/113@,\Ae:aRea=6m%Ee1@MX'0$X&f/2XT#B2Hjp3N$b(6;qN^-2!c(_<u&ibMQdUN::5o#Ea(sHq-<:u%=Ut4-RH!(97i@rRr@B[J6e_JKKp@-sq_LXEE%D\an3%jE)cokg.W)WbD"MFHVp33#A78X_Lc*OIM&V,n<IJsr8(b(5O!V\\5_899W&P7F=p16BsG?a*'pS?N@0n(CHQp>_'oR"q3A%Luh3["MZXs&m%Q<&PL&GeUjWQ+f&l>7MGO`0Pj)X:;`BKbS4aFdPcnt^gIi?:f^;NDH%Th(YbCqI]gb>+l9%t,n*(A71O&L`j+p2%.:c-u1RA'9DJ]%9g'`OdHgk'6]-$Tof]<6C#YoM``j#leR\KPnY0^4&6]O\SRZk4ELH$V..*4l?g'CQ.T\H9kYeU7/eP27ihM0q1%S'.>>WL:SD:pd;D#Gm;,Wu1NVlhDI[K>W(bR'<U1=r"p:VIhUigTlNpL=N;q>cac@dte!REBiT*H6VHB4^2o'+ORVf"`lf;i_eb<%S6`N2N29kRN%&)8Wgn%mofPT4kSH:d>c[SV]<4Q-jZsN5'B'5&O&%5UU_!ql"g5cfj"dG\EE\1(N%f>t83]G)#Y1u4G.bEQYb.,J%a.HcBe`(3!3:imIQFN1l%>?eJOeUHI.\gU2a>QK)OZ0&;8_bVq<81?FX$IP!In^s2#RYrjp:sS#J2u9EV+QAHj:DD$o2d6@665Vh%2g'@;Gne4K/Nn*g!)CB!ip#Eap=5sG'0U>OMdh:Ro&OTi.QJ]'h=WHY)lXF5LG..9-A17]*KF^L@NZK9r:#$^)d)=#3dqu&$eY>!%3%k0F!^IJD*IK:s[6/G<\Seu^e99#4!O`g?&<ar_Hj1-/m.=mic?PND?MT.$m,3h*9O^CX-pqSK@ng=KU+-BlCL]Yu)Q+sA@"QHT%2O708T#e=cMugf_q1Z(S+15H.mK6i7iD%+C[nWGGA.G[u#u@!U+qST6RTWkS(b,h1,1$)[(E:EnNtMp9I["L_hkeW;N/!a^i$E;i%M2"$CCnkDar"\Y#0&\ESEi1GoJW"F4\q.j5j@%SM7a9boY6a<G'D7S7&sB8L9F.,:%630\9H@nQB7>B-fCSN9["jtQ7I'2=A"e/,%nEraUOHtXD@:3G0M%]srU^f*ac`0F.!c:T1"Ib`iKfN,T0GD0O;3rYhkJ^-4p9A/RUYSI`$K)Y6a37F5j@PVYY;QOu/kV"CA.3e@%eaRQZ>7-Vp'7mSuR;oEui!R2(Fa;8=Att/+iCgg5A/V.u>Zh^siknYn[VV4K'8J30M!mk>R1UKGCbPj4^SM*f=jTFTgNLr*U;9/O%Tli:d*Bs!8(%\\jY-e/aiJO9tcsV',1W*lKe";9g]Qe.=#<S_AmFS/UUcjL]o+&8CaTe8&1b#RVj\46M4q49.2orIb0L(DI"`s/k%R)WJ_8X[L3j@"6lg-n@45F-M.PV=fBn-,YKN<L-UAnVZtU4W5Lck,_+=O[jr8WNO2N%&SI"gPmqp/7`90,+Q+9QJd,0je?988jhh%GQ'WB8!-b-d7b-`3QE9UK5NtZf3YaXB;'o*3VbdY5/;;[Sr\8d2:^u9rjmpsNGIOBmElmp_;ZmLj]p8(W@LEFT9tB><$7RgK[Vh.%L;Z%D1qTF5n5>`@af(d52^E%o.&j+6LYW4rW^JPBf-'p'<q2sll"W&U3eQd^8sN^-!s=cXMn'[E.S2E,AN@YiFM.(>7TPFK0UEnM%qdQ`V]ELAOfOFbFJg8bOK47f"`.AD%,hk[V/;Qr6[g^)IIaf+ro8"Z^LD'ap7hXL(D2[*0]^%FImBlfti!bFq2JZiH*ZfUN.pJfE%/jXc'l@oA)4ccZdZ%^\qN?O"QWk?;u'PD%7`756N?UJl<?pINuKk!r<**MUWfm..8e^uE8%>Hg0/5P#:r>HR\<h0$s[Q>BTQp]$h%<>(#mH<6o`jXkX6pGbMFK\%Gdbup83B.<D#)pSpPR(VRg53SEUeIdM?W=jn1cIc,g[R%`@-AiDf-#A8[4AU("_EiW[\3YEh6duk]%4:%!WT22!<U[0!r(U'm#;_ID+eS<p'T>H=rPl.[1Q<>B6%CrDkn`/_@jG6Hp;]Fab*>@+(>a%h_fZOO:ZEUh]4N6<./DeH@i2,l+%/-Z<C!$#6\`rR9*K(SdQTApGS+WKD1.bfu"K7>Y1XKLG(5+a3b6%*hj5se)6+)b%%#$:I4hIkZ<3c@n@\Uek?NpeB3=Ns#O9%3C&%1T"N8AN,Mj]orS*<LQBB@(0Bo?H&#V]\.#A-8VHrP1X@ZJRO,KlS]DTfJ>,d3,/M4_c.!dPU@M;6^FjRr)KLf)nUta%>fM%0A,4.%na-HID:FZe$lCo+p;;@_J!]B8bt4&MMjT"h<*%9kIDnTYH3]eH@XJ>a#U:R0&lt%8cXrV06hi;6`DSk#?aWJr<BA+qc#WUNHqM.9%$VTkH_iOGk2rG!k@&nRh4p;Z9RM5G_3j=&Z7J:9%BBuG;Or__:aO3<\&43`T&TFn\>>?.eq&^.AI-GiCP+EgFlhUQ64)DCaD<RDF%CV+s4Da.bO=O1UnGkuk?iq"8H-5+f%2i:/N6;FD!,O?8tP-UJ/'`;tZ7eJ^N"*;r51Z6rCnU.,DOf#,0,U;@cJ'iT1ZOA28@2JLl%<9:Dnb9.:c-O#u`;Jdp;3:a7Q"u`TQq!fKb,Y=oOg=W`7)aBc'6d3M$LjZ!b@2-Ee,TZ-E$8pYGAXIU1B/)ah-Q9oqnaZ2.+#Q1[%R9<7@X-rc_"Cor]5S_Y,\uBiCKk5J_LW23b"RXC^3kgt(U09=hqGlfHM,<KqUG?0CQi6I'"cJa#33b^5VGm-']C#f)oBe6A6U6mF%=48b2>aMqH?B[YeG=E5A7hsW5Dj!9R)D2*Y`gf[8"*::^k?0RX^g9ic_>70(%#P7b+gJ%[QHMUU0t77%ZeqJLV%p<Joqc#/,2*f)%Kp[8HA.+,pQ=K^t(N2T[8s3Em`gUI^1&3C.i6G8/>[@s0:H".NC(XJm-t)S5hS=!=7!)Mb>P+X!@tP.Vgaj<Z([ihtRj0&8j^g/l%9Ij<1(rD.ahFH+eeOG:,OJ^l%p#@XFY'+hN+P.1po:>FAdp".:26J:Qd5I;U'"VfB@F4`pUA8%g5e9Go4dNpe@$^_]`U)>%F:4X`%U0G]*YB=1s7T)Tt/l;E-LPtKjUha^<4h'B\Mmfnj^?'ml%oF_="ih!!,D2U!qne^cf$G-XTlVhol*JD$PRCVTJdOlaNOXmZ`l53Y%4UceKUQHYuln%&km#4i"9b[G!N^CPA$@KAc@hQ-2bA@L1J7fZSnJ2^88ABlTSLsjR-,;tm'Di:kf7@egZ>Ss9jf1RP@li%s6BB[f%EB(h^K!HtK$VOSQ\m<ijW9KUu&*$Yhi9UG@ER&9E8:pG#J6`:?Y+1j'=(iUbM'o[7DWdIW)67B&<bE;\?p.MC:'A='Q4;7u9:6P/%bP>&fVsH\i!FNG&bRRAeWsFVmgZD1!oG3rrLX@8XCR[/S(J/ocZO&#Dm(e\S,EE2(;%F45)jDcGSh)>B8NJC(Dbt8mlkUMebU(M'%L7AE\C"72@!LHUsL=h5*+Bk3cU`.G)dsPrFlVkZKfYfB>UN,hi@5CjA.T/?-,U'?jU]i+uP2V%(1a@DTA;dAmKI`9Y\JS/ldtru&%NW^^!aTAFgbEW[WkG=jJ7EQ?hnjP%C\0!=3=pA#\B-GDZVice`#!#nkcI>Z5<Gp)Yfqk1aN/O'k=%QnQEg.LNU^Qk:_Qo\ea(pGK%f#M2.A0`5,g@Rpe5'u,7iSrd3'Wr5]ETAnL_N?kVQku2Oo(+[=?-&NR@H>p1[#J*U1r3;>\gDW.S5`fqIiDa3'rQh@X(:doL:aK=%lVLU\3M5Xr7@Zq%Z:^5eB8Y#="l61O+AudT9'"8sMh*LL%tD:p?Q>YAXc)LkBq-A.-(c_>\6?->"JZY=dc+A+OX!g\7_lIP+eDIr%8`S7XE;m;D:XLOBKeU7[X4U#ICA,rj$7.PdFVXeXcm+>qWCM]lrtQsKP)Cb[(]o%mWeNTT]YTDe8P[`,fE#at6V[rQ`0(t]@Aj5?%]1eBuIsNpoL]!P66k9a.E3M$t&=m:C>CE"tHsIjI0:OZc0(a3(7ZB]Bd>3]0Qr&kjc3Q/S(<_HJPH7Ll2A\mh?C_tZb4iU-R#THE%7\56!XX4hh_2/\0j*'dD!*1b)B#'oIlr2[bNU\4@",gqY331Z88h::J,=r%VY,j;+X=P?.D/GBrjjX<<?(%\%>Qdoe5]X9"0+B9p%#?kEmHse=ur6D,,ETmqUm/LH?(H]AkN6=T.=ZoZbp_FDA.L3kV$L/eYDRf(cKL8j@.GsM8Gm%i7!%)?Zcec052Ml&1,[?r8jlO%d%,\6gsf_'06P6>E@&uH81*rZb.<f;c&_/ml6jI<c5SuuD="Q#$`lE:?6)=f0eD"@K0#!ln@S3n89oa0QZ"-\0j&e:<j4rFIPghE.?%L#C7Q-]=PoiR3prRR_adKZHrX7t\&-V?c=/47;Yf6rKlfR&*cdYg3m85L!p.jKrK;g:D7WBUj7F$*c8DdP#S$MnjhXWoM/K@,m&3%K)C,:_Z'H$%Sk).#V0]KA]ZOJm#5^C4h#cK;Hi;dQ1m.BQc"hDU^>d$Lg_2@?QqOmncNC@K5Ms;5:[[WPJ"[m1g/7dZ6\TM3?9^n%!A>1hZ%j0U])R=s$(?q"_Q*C^'JUP+nY+%6RVfX7GoSKiA>Hc;Hu5?SSU6DOA$Si`%#tr4]O<AQCa)Z1B.&*>4jTel'&"ukd%tgB%'9)OAc!%'SL@+JqL<_!FeLuLjCO4iY1<)-@a@43^[rkI'EU2s[P/PrDaRX3seX#>8.g>JoF&cPe]$sA1,\R5]>@`FWi5M"<>laO/%.)SOa?liahKD*sqf.D1r9([;o&s)TMHu,KiKX5!q.,uUCDj@k4QB7J,N*i:mc6jn@ap\7t*O1hD!EsMT70'FcP'YmT!YrNY7iUr#%6`\p@i1JpeMG]=G,$;=YKe?j-FEn=mTk=Kb/*CE834@!"ip]BS_^'ZXl0:sg0KNt$SRMQX3^'sLd9IhS(X4jp:_buVKA>)KKpnO]%fMO!#=2"*e?#!se^U3u)HF.XmhqP^Y,l^?V]A`/j'BI\;CZ(O`0^`C;XP:p8-dR<U-Sq.BWWd2Z@8;2W83N7Y-gT077Du8n`Yog)%Rq&e%Tg^Kq)&lf%!ah7f1(Fr&>>[(BValGU(,J=KotX1^!7gk!,]1Zb"L.VS]%-0:TV^`km3IjR(0o^pFkKYHP=4=jkHcXOgh@Ql%j/AFl<RRTX+m_X_\iH(]h(4)jfcJ*93RF<=<7gl-YRJ7G>e\B.(+I!&MiH3!LEe[f5.$S#oiLo,1eYj:O?J?K)'*6F)Z2#*KEG&r%\dE6.UB3<k)bi17%L.K!5Z]8X%R?/jj!"nPEcBMQ4"*0XCnQG`!`M:O#*iZI,(CXm*no#<\doc(<][S/$M-T,/K#*[HBRMBaA?]T%UZaL]1T89nEifB!joE<IA/e!lOeAW;UOgB8$*X_CdCb"GbLs&6&<mUr_TVmIYcqNLAZdN0C.cEXZ/>T`,7h5H-!Lpg'u0kB:##6X%\,/<17Kj`]o@P-'j+s%Y8-bf'#2JV-LW`p"ERY7%_<NDPh:t\*b$FfQV\.^fiORU0=P+Fa8gQ!f&=Y77&t6-@!`]F!Kc!YJJAD+O%2-QS$(N\\D`k%>0)uJEtjFu:N2F(P)4C=%>h,lN/['S8:%'tU]OF'u=Ygqa5UF\I%88hK?p^.)U&p8li+`gU>.0+ECf:J<AT=E7L%qUpG&)8MPrg#WtgfohY2g>u9I?nNq:5X[(K0fuLR!HVStg)RqlVmKD)C/#t[<O]5W4`3!9V]i6aUaiMTf<&-HemSc'iqS/[m'Ilb%hi$SJJl[e$7WlHP=_Ob4\V6"f>"sW3SAATi&j_D`';dgHhIq'fNp=8XX'eDr5VXX=@p!:6)%Bem^h-1!XO?/nm+4P!"K2mNa+4G5%_8/0;^-Y(_1Gn&lm.a`OW+@YSpK$!@Z_]Y5Y?QDdX_+$o:0-\2':1"+\5XtmV,>u?A:;R#+9W^82U%AX7h`MYMj;-?KL_0g'k76(%oFt%T*=eGgpsHlLML,<(!.uWZ(:bJfJ5Pk;p_)"/K;&+p-NT\CX%A&O!.-SMqegBp0!C\^Z36)mjU:UY<NUsf4/gi$D'&i/j8eC3%/Qr-.f6Io0pBYBl!hE*0LI;U&6OB48eD4IGQ"=KXTHnG4Kp(ngE>nkZ7t9K%m4<BH`/13i$8RRZ*Eu.eV\s:l$GN/a>Chd%g6<l`%N:Tfn7!XZU.MP5i`S:=sC,\eMQ;mBpmA@ieF(1-/Ja*ULk)O"X-d*@-A(r^9>6eC;=2;.YYQh=OR:=FQ5?ksZb6pC5>_AoI)Z)F-%H_r'sSKL4H!os`2(t`e[PlPZ0U-p)lPuTt$YQNG74&q.MK$rgpD*X,V*!ljSn=tT1-s;@3\$I6Fp5_qDU"EV-^`6X-ndh@q#Y)J$%d0u+?YCbem7\OCq4GE"q<;XOPc#%0gltM]Y!7A`"l`2QUecgm"2D[4c/4FmcP\?A"74kq0QtpIKPGC4DeRE&->#$2Qp)bq>mDHmH%2aYm72]9#.nn&U%<,Y\V"X,l0BTuuOk'bXp0PLR5SU>527g3Z<3c+Q5;,T-RR58/=[ZOP8!lscI?rJZ2KX8:s$J8N^Ce_6%R[4bO%=:WVger%+N2K_)POKMK67?"2^!.ce?(idm;NsaG><Z/bI2HmJP[jkHk^0"+oT^^m:HU:C'F10RHTPF_'X5"/-EPW\KYG3^(=M<!T%DjNEW5ulZB(43h)[Oqaj14saO\s_h?nLHqpLiJ_@#R9EQYQW%`"TjY!nuXcP4\@_8HbMGF.p@*[EbBt-:kdjplICET?TF\ogC:6E%C(]FY$V;q%<cJ]k.V1JQntMV%eTN3)]S*8gPTqf3,b\+fX-fXD%!&fE8PuFd#>=.7.Pf4?N_u!UO@U.F(546geguf$Ej0(XrZnL8%"jN(5b0=13Ufj"fMgj/Si#j%SCY=&\9r<Zo7B;WQ)*/>F7MSFr1L^BHaf?=aKS8H71GtCd;!_1uA[#2(WG99L3`A;-RUE`eK7p\W%r=Pk'i)g/$aa[=$3/H%?DlY*LXX[qRZc""c+2O]]As#O23,OpSV+\ORQ@YPtAo">O:V.Oa?Jd>;,)p@e<5CnpL7[Dg?n'TB=nl]!%AtXN[24)0t,?hY=@Ea;bdk-?,7Ack-OsO2X9;WCU0,HeS'K/_SkGr=O`2qN]+L$(3Hm!0/`9k'<D$D#ZfrHYd*+`KqNZ?1I:P?Dg%EXG1Eb-PQ6CdgJTXi)SB5]m(nQ5k769pTb'-S&T"4>dIEIlL\b4t9OTpos$3QF!Bd2Ian8U=j5pGcO_i_n+AtZ`'!9!mJBWhno;\%kKEF8H*rUY2IS4S@HBq`Z8aZ(eS,%G0&L/nB;`JuB'H<2iaa=;k-G\T0n^QAIMA%cM:6bk"=OsM.(71H;H,K(=O'%cfif'>=hPGB%i^>NY&?GkP'(3bR(NpYs%+:_[$P1%[(K_,h0C'lLJ^qVEOCt8e.FN5>?-SA((mjBE=rD$ng?(m84le;R,XWo?(pL"I=t_^p6g=^r%H,haZ!im6/]=@'2W0[S*_)t%&XU&I#F3q!/8V1ablr16j-u,$"[:C%\0rJ'ZPSjK<<W(h^dAbtjHN:HO/OCK^Ip@`WC:.$aA7S'/%QqJ9[;9s0E%8_W#)is*-9-2T&_.E.)qGhkMN7p%h&iCqnI4T2d6-O#L9"PPPP,;7$bgb:>3T'-bro#I@LO.GG5-k1@#ZD"//u)FA%r$XO%,^#RS$[ujNDVTXSL-<=)=QYsVe`]Ge^jiPp_gC0,`ZRH:Y!OL@YY/gIRCcc*"tj"ps$]NS=0Rc3S8DF5BQ?f$WtuYh8N9'X%-:ZX/SAhj7jJ4VtOg>uR-U%>$!YaBkhGUFO[0W(f#:1oY1dI>JF]S)")Kcoe<Fd1.<.o>mj`.Ecbi%&B"m$%I<Jr@66k,ra)>YIW%fC]#h_u(Qhg"E=t4QPor(=BE@11(2H.O;$?]ZgBaJQCSF[-ojPSos!h(VOA(co.3m>[<f>U3//S[hYrL_Ef3^nuU99Q$t9Zlk"\^%@-&*dBK++ng=-[',kW_78k`Kl_lHVl<N(K+ZIQ=h[.b6EC;7Z?QU[D64KH">dm5:oA/N/4D1nk'1(*=#jV5nFc7o#IOu9V:)[rbq%87G_+RZ,1Md'E%/bN8!SjVsN_Y!=dlWgS"a2YrP:>t1BNQL-:](29lQX\3<>6%J;WPI>)6(fT@_q)$@")GQ5"I`i!o<LXr%8?E#9%Z_G%^l`d,jn)IgB;//Q^=Fl8L9NhgaY?HCbN8'9+^FT0eUM>g4nmo@^Zl^//hF`SpVMrC!MSfXZM"Rt!C8'@p#2T2d*)Kq]"^]$^%^GnI-[_I\-A_Oud-s'=EE+II+IRV16UN#OO:<`:k]7e-1:esa.<[H7:'Gpp#k1rFs)?^\b,Z"s*V%*f\\k%p&@.]L6kY2;o%4##C%>8:I*pr_#c=p@]pY#:\a@EY'8&NIaL`p(0gD>9Q=AX*UI)Jf2B;^c[mM"N8`'8/9Z*=h3Ieu]-jXnJ0-Ba7oUY\Z4?k@-P0OA5%2%,IJt[=NY/o6D]^KT@5Ma#ICp%f0NsjM[%T1Wr:Sp>K[1IeuQ6EQ>tu[c^PXl!&VTG<JA`)64KVn$T=O8i*kt%-%E)SCT4[3)A,OQ%_N*0.*bQBm8up]PL$&\fRsW,c'qcLglkU^Zk;-Dd3`($A*VD8ibLUAG]35aFWWacjR4JaHJpj"tM^9bn?9Ts!H&dE1+g.akE3lIp%)-DhmlUX!:]-mq_;pA.]>J+_Wi>fjZ'He*:Qs;HkgHF<I@1_h$\"%=nB%]eF*3"5THn/A;"U'G5mp`QiW3dpa$+Q#TP5B,?X(=]c%02k[k(ECfDd$@b$aJ+9R;:>`]TOq3.cB5WOFQ.WPaX$n]eC9[4&iIK.?]rrs6F4q'=[2B0Z`k5\/0L2)8V_>[(9grcY"S[2[GaUu%'AK3ZLCc91*PjH<=R>/Y5b32OL&eZ&iD(-Ne2=BqJ\739IeK_$XiLill?ubjq:&p%bfp2A!(uWkkCe&Mm"CTO!9_SW!LPFHe+;%=%p,jSK#!b;BT+@)h0=0(^FY8]Y:@'D!e$qBuA+90,_Lmc@cO6mS@g[=,#VYOlk0"=,QMDD2:uVohYT$K5>^d*_P[L%#<kE2(P<I7c%IXk-e6<gl1"5-_Lnsfb&Uc91u;93#H%^hb"ES4e2?(W\i*9)Y$4SDr'9Cg#j>\lab1hstfc5FHbhdss2h9@*Kg3>Q@5en<0cB"iL%8[O&TKICegW<2Cc8.Qf%)bLhtQU_pdW`Bo?"rR,!lEo%b%'WnMc7n`bWsqD[&KDK6)ZM)WDPMNbo]#NF>YA;PM0S+:7_>NprMCW*%_V3%a,'llo^o^b@\e`4Q#@L,1W&R$LE>#'-;jL7gTID54:5EXc&r,_``-)KU!%]Cp2i,1I*N"$EZojT(A76*:b2N.I+_Z$4!h7UT%(L2A]V'YYkq]`I[]4aMA?=2k*kiU(_8A1U=;Wr81(7HIp9ljQl(K7pTTi<p,"MJd<"m]tSnbFg&TsP9GdL"^uPf98*>rF:=AbU\<%eBem<I:abN8NO8__eon_PMAUeX2J1k@GW;-KR=^^%:"C5m?#%SP_%Z]__nY8_*^FKUF7_UNVWYA.f_Zm0YDDi)M_aREsK<c,j?Tj%WM^otTo9b"&X"&+ieF"f`QPs[%$"n09ub7e92FTj-V45>Quj*<og,hu3OoqN=RRHrR_ouE0,FR1],%VrUB866kW*'Q-fh-t%,aZd%5la>N?n#$nj/>.);OU$,A8tE(4O?.ca=!+%6r"K&&Odmf%66)qU=,%VGO>=<5J*;Y!%uH,&@3PT#.H[HD%33B/+TnqLBPD#**L2Z%"^JEe2JVZ$R0KS\o&EK\*>'^k`\"h9pZ\1n?!/eG`Zg&1[4k5(MG;E>\`--E2+3Y<]I*F[R<o6$FrHV<;43a(3F*\-3:Mo!EWi[&%aa/*#jVOG\H5f,0QC*9QG.,n@h,ptN3$`m1O$JB]J(/>t\/YaWH-@$=[DTi$>pqop$42>`99pZR@fo%KS)0\Ve[%ucmOZf*Q6hb-%2c4+$0F`[b[o]hsf.'%?&`q/d;o7&$W;+[;G-h)Z3")HWha7&gmWk+V8U.UN!:*2,)+E&MPHYW'gGK]Gb-8/e`E&W;rNK-'$_3$C%gS;2IRZQ-feS`nB;KF`L($'A5RE-GLKcoOB,7SoMBb61'/a5.:><g#/:5'?j"R+p836pi^5`'[DC+Pg9K&tFdqc]t%f3<.=@kO9g%@<Y,4gB^7EX4&N%9guLQ2d^h:6^3:gYRdcsZ59@39/Heb?r_7B@^7n,[jDhl&?7.4DjasYo4tB7)p)_("f6(A)XSrg3PCccU-Ig6%O1(4@K=_?[E]t0\+6[;-TsUr>h\([*H]A>rKR>X%Ct7_TQ%\AVf>WMNC3W2k,KQGJ\7\Wj-%%Z9L<V,HV40_d8+e_qq#k?l;7H[0%e!g,A>WiVp^K-rAU)#6\BhE<bG%iOYaY#U,Jft+r's8IT>/Z-t!V^_p-CVotc,'N3)+j+%.5SLefM-BTX/&?l:j,[KQ1(mf+JD<1%^ek]IF?Q.I%RNui2'$+sQ),>3\BuobMBc&qqN5Mcj4/Aq3,]q4]i+hBKAGO#?77K`25*!LpISS>3K=MUX#_#J,S*Gd>$Hj$^?nsC%juU.AIalP,`@qal"7bTW#=6j)Bq)6K-l[(-46Q73EY(\Pm90c*aF#bI[jWS]n-Gd'2D1!:X-Ng"0l'p!2S_H=LqR&;\&9226u=;_%b$5*RVU<!N4o0,&HG/9@R#3pWI5RbC>"VhH]'Znol:F(aBZKJ[F^j-WjUO3s&K[F-ChL!b'WGK]PuYcX%^@rqeH&]6"UB2Pkl$PQ%[]eC54ehK7+deXc[:lT@m=pcH*m9=kJZE'SVAB:7-s*EO8L4Pkh@)-=`aT[Jp\>C,_8)]p>kmPD&L[bUhU2_g+ib;9JC6%(!o_*J%:AQejHPRLhULI)2/C'.(qNAS8*Mpst\?([tNGeMHe6VD3\:M96nbl>,gbO:$a,5'*P@YTHeEaMaQ63SBZ+EI`:E7pA@IUF''[5SU%SZL4g5)<_;*"*j\8H@d+[4c^cVN"Ge@rC!;U/l?aO(0crha$_f9'?>/>)cj?f46X^!aZ@%.t%$ObO'A;U#Y*UAksWmNaX(sn?6TK%[Auft8<6PNn>ObC1R/[04G2:]0/*(pOt4P4=%@]1H3&>uBQ1]NY:EP[;UBA!2l?n=H>C^6UJtY;b&'T/7nY:tX9ZLa`U5>&eLj.'%Q>([MI<jIgO@G&SHkU<L)LXIJA\d7,QeM%(>Kg&A27@&]]lSOr8G_B@Vp#"OXgiaN`#6!8`$]=rlq_le-&=bWEo5';d-#/sL%HpW%f!q<0",npuC1k)<UU@ZNA:Jq._hS=7E7Z!l?\g0b[s_IpaW7m)L4SIIlK('S]peVRP%>8W=Ghde]\Fas_VAZ\GhId`)4c"_:2hF)%9Q44`1$/r12KVpN;KX=#7E9)4l\^_MGBPJt-Fg2An,j\F5mQm3!HP]Y$0(`_F\DULD1XF5\LRI];#^28r#1H;T1;3="iC"'p:dX"%3Q*hoVOq^f>HXrXdKLbEC/q2^Z7!RId9qH"ZLA9gC0aP^O4$8_.OeZQWY@7OQ]=IR0r06IYuptb@b3:8W/3Q+G5!!<#bYe-[Oh.0%'6hg)!#1!lZ<N$_eZE\k/6-&EKOj&>`.\Hu(EuDnPh!JRa'XXDb&KgPYpl$;N.<<2i3M[NabZE$SZBZda4&Bbi/iV4ctO39l=[?X%4V+2#lA]7(([Po0,/agk)J3QeLf5BI=/!,`M(b[o5a(D"L!*uUA^7p04^DBBS+AY'0.t:d9382o@:Pj63ln1)e7u#TZUh]]i/:6J%5-si)=U;p24&&P4+W=7O,Y+o2c@JcM'^2[T^r<GfW,.Z,F*H0_3!ND0J4F@e&12l!<Ypns"^GJ[8:gr!_E8%RqgU+Gn8K.=73mR$%HN5b`e_T"]id=Tq>]Olce.bDXG:O`B$hHG_'uVH,[[NGe2MBRW8ch;?7O/7ZP@TXgmFou\U/"E\V`IHHc559eRC<6;P0+nL$25>a%gE]E)5V%'IU_s'J_8*/72eN`rgU:n$10@eO$YB%-F3kju/$-oV=MU_%&mu@2#,(+_eNWT5CXp7:'[/R454Umq>_".TLOjm&0SoNP%Q-e1Is.nR(H,TbVOqiL^fgKq]?%iX0C(LaWMu4YA&TJD%l_IO_0!)=c^-E2F.HcZ4(_*]6C"m+97PV8NPKK+iK!6k$H+O*nNL8G0%r0Jr4+)Sc*-@-O]k=@G6g0pBVg1>k]V&a?e3,7nT_$7md],1OL;RmYIelklU(H6O@^f:\AZe$$>"bRb\]f^2%NAM@NG,7l,R-+,G%,?M>55J*>'W>Ei>51ZuCN8I]pCp+b%+T/rXrIJ.RKMY*bT>n;EM]MW3>W(PugN$:/Anht9hq3?c^cL,#VY)WG[`LDVAQWA-Oru^s%("cJA3,URt-<ZJG:G?6>4nG?7F$/[[jW],8O%F)uCu673ZL*"$JXs-YF1,cR<`>3UA*hXt_@CQqompR8I%OW'Me%-jTV(81cZ%Hb%^k7nZn'5'uG%nQ!R6rK]5k&c.j0$I1929UYcGk?Z\b3;e5E/al/f<Z`4bTFk74HnpGIVD+)d+I;-A[RJXIp'f4B@dWQ`CW$oA";W%R@LUh=WGjj6um9JVe!`[!G2fD(%P/H#oO*dJmnbc.PdmHI\%qC>^@O$,#JM%,Y][Djai?#8KFU8KLRc"%>]Z?Yd.=H?hJH[o;)Gg%A!ZSc4<%V#AM\9E0#B\pLn$_BpZH3JGX_9;@1'DGc(>oprLrGJBP8R)HI4+tZHJZk%+NGN`@b/QQ@-\R/L<J?BEhKTRpRMd)>0kJ%2kXhG#*]Ul6n4+&-eI=u]Z^R91`-AlgNaZOZRKuH\5p#aYl_9%CPaKMR$(/UCl[\:4g0FQo"5Ds]W;q#i8O7T4L0sVE[%39+j6.Q%:C=OLcoefH1=%4C"@a]:'`t%F/;\O+KP:EY7@LB]XtNX`GqInT%Dcp-cGEI$<5gP(::=@D)(8@m!:'C"5d0VuM9/t@Q5gG"e^ChS%ngu(7AH>C.'4VqUL+0p7jXaJ'@e_JO;<"CWpeO0V>i/EUeN7#%1Nmt^*\9Ga(J*)Llj$_sAa3G%`R`4tF'p%SM`,1O"G>8f.3*3:%,)/&"74NPl9H6MZEGXkhoI<i#/M4Glp``2'>Xr,4hAfZYZW$@l@9O1VJ8h?bd&sde(mnhFUBE%K<I!`ei>We."]@MhAXdZE9a*/_%2irS'Hk$aoO#>O0+Q.Ud-i=6ZDA)fB#a"Wj_RARj1K[m?!,(9eN3#.q]$Z'3^]Cr-DjNdj3=3'l,h)lD-Kkgfn8NY]CrP'(U3Cg$%3iDL[h<.MuXT=eG0F)@-M[Bl[VZN:XapWiuh?2Pt$,YTMeS_&QM0D4(e'W`"O8uBS*:02Lh*KJaAH8DW5^>OrE"d+SCYD(:4*"n9%.eiuI53N=*-`_""RM_mfM?6FN]hh)))-H83jYCDBK:37W5*)&P;%I'7UP%qX4Bu3^\S,0dV.n0@3)EQ)bLtCU$9W"e8/hU%T\V5W%p,7m8h5=!48%4ULb<W0N)'o\VJU+VE/^+\MZEHjDMffq\YSm_b5bVHcg7kiu+^dCW7ZCQD5rBCM5^7b,,5?mJXc;4-D0uQ1=TVtK%$__,8!1Y7L$6J1/3XERkm7%?87<l>T2Y0>e*9j=\E+@9@1P[VtZ]dcFKE.E46>>P=F&f3U1@'0p$eo!M1NHpO<4,X+RKj?=a`Yk?%%?$)*EKJ%.?^7iJ"r8/YAk:%47r)hX+;c)2ri8hIQBH,X/I!B3QEX'!(kB3T6"5XCGVlWaK+4nIM</.a9f?ES!A^>@4$"CgNHT)#%cW1:/PjNHLU836H\b%XK$l/qjcrF$qkI_V98qBCt5cV+E9GpBiiKZKD<6eOq;4/t?9RL5i%m%eL`1Eh/Jeh[L6Z_WLs46Q%6G@\Q%TXt_R;LJRt9s@W>.!kA\(Um%R)\[h&=A2B4L_9<XXHQUm[lKd3<cYK)ZW>?BYA"iOP.p4t8L"(Kc?^]ZVH3t[O+X$^T$$Q!l#)s^%<NRq]K2m7`,`*+H0`iBS,lm'EB*T)d]:f_07Zqfj(UsC]AWAJ?]/k^ed,Hs7-_7GQKYumqj^]3db0'<<WL\]&aI1[;_&@>fQ)mkI%Pe.Y0A?\fS><)`hV?'YA&AVZY0QY[iYLTFCBso"BHXXkJB<_-B@!EOQA=+tP7ACAFK0e_[X?"+J->Bo.*t*EJe5E%XRi3eX$'W1T%dPf;IL0WZVBqdpWJ0;8IJN(/U2-:)LJgCH)@5YYVc@BD+8kp;-#rTF2/Od"*>C:r'bq921#%-?1;SbYj?;q,%`CY6gR+28]SuekI%(s^cH,!<`u,F:hR/IhHF(@%qViuc1@C!%T(Ug1]5UkF<D<bDSZA*&,)A!*dX(mZ6l?\$ghkI6-EE-X\#7`gr?M(7!1/3o"$<QUUr%.-Hb1'KOhiY=ju]E%K8-70dNe]Tem@fJdRr=\2lH]#Ohfg-Mr9)]5ZZSS$Ok$rdVa\-`:&EtgMbSS[(`mfhcV@#+YsG2-[e2AcVh%9iI(o(6HPr;VKH/rSb2jdGq06L1qgFeiL%Rd0=N(*Z`lAU?Z"HMst\2D/@UW.EcO@1lG@-<bes$GuF.)'gS4sfPWUeLj]BWK8+@M%3t$*1G\em?!T%SNZ.VY&"K8(NQ*au&"5&jF@=$q%.r>\[,uOmVQ).\h-UjDJ>#KaI=je=#5`-'05%QqgP[a&"#3XB7=U:D+=UV)-%R$0,Ao+S3?Fr]UaJ8IL\ak[Rl>[Ei/A0uC$WM43%QFb2LC!d_h;QDb"(W*CM22P47@i/.Wkm#G70r$X8)qi1l@#U:6g6ua,ZLs[:%&)DR<@g(%0^o=T[;?kD$j(XA+[Db`!AS<V\/l\3i?OI'=SZ@_8I"ND?-K6njnE7pJ=Rn7epMG"KFKe1op=U?H>[A=QZS4"/f)#DB%9'%@gkb]No5`QU*_3$".$TRJtROlBsRq>;:*SH+g1@-VsZYMSM[Qobd'lY/U]!Edj^#c,f)('kG=H3<Z@UZY#cD)NfTd3*++]Bn0%1Ch>+#:HtA+u)'G_Hor0$ta&0[_k(5Tb=S7(-alof!`+MoSm%=``\,-\-`b5(WTS$S"U]0QS<TO)^U90eUR`CZtL,bHph'GXMC:J%0mR!2Aqj4d.kk-Q/3D6G>C'lPpul+;eS#eg),?[@=4mjo>Ca.sG5JqA`ZI.8FZ3"MIdd]X(>X/6Spp:>F9[cgQ\0Sbei99D:nr$u%1`8".nbdP>*\K+*Xr.T"kH7=OZQ&:_LNrlg:)KE?#96qaCo?f_<s%`;mPOVU.<l[XX\]aYD.ruC?:J<CBV@23V<Wj.H=TC9kuRkA%XD^@.Eihl:X(CJ9XMctq/VctQ0Nu?k@8!a.;Q[k1"IAEZ;!hutqO#Ptcp`/?$)e.>]lk&UGd8.;i8O7T/16nAi5J*QV?ot4KAj1\%h70_VdNsuKls(Pk>B%IA.5bfd/YL'c;n]7?5e5U-J^%_UC6u%X=R=?b"m%j-#hhSla9$fj%L^Y/"#GWj.gs>FP-d0Fr;l8"6A+,k%QNKfrG]%#KOMX4DTObaB]J3(l,<6"e*lmLkfgq$Fq0Wbq0!EOLMm[;F.jK;0Ki4n3hT@s4j3Z5S?E=TJ@mN7HS=V)%WLLlB$I$J>%/r^@H[:G3Bk[9"eOPqa7"$kbGK;RY,!f%`"%qfaejdia;+?`/D$?KA@+!1\n9HEJ"KiE^skAfgK)hF6K=2(r`3`s13.+Q/RlHD#o%?\*ujlgcH$M/jsf?O6n`bhU%)WN3jbS9?]S;=Yad>;*s;ATN5Aj0+pE>&OC,4F8#^VAhQp)Ql6;O['mQLj^r@*&p*&c76BV;(/kV%$n"\'p2ZcAi:PAQM[Y^4<AGk93t-A$IS]\.5.q-9KsH4fCJa[RGQV,OqP]c4?jf:T_cO2@dZ!HHJ6Vq9>[A1K`Q2+.#EB^U6-NB7%Nma4bW\9`3T^jdhZh]%A8lHk1l9R0tF.kRQ<Cm3nCIZlgf+Ki8F:&#go4g1dH=tcQI`,<TI>9oO<a81Q/+WbjD&h_eM_`pC(/8)i%C#%@3XQ6:PTP@+0lSSTRF(M"r7O3aF(,bAX!LO\8j8q5nTUIIdY^LKt*\OXT/>V'mLT"Cj/:H33F#.bhJpI4cFp=$qZ%J.g>+p@+%7ae6@RT<]LBkmYJ^JN1TCAdY^Ti*J*&ROVk$8Uo]jSH-NHlR&@gD#0HSmcru/m`GPa(dK,R6MOPdfO%qVEJ4/[K^72II/kkPG!iQ%;RtA_VK]YDFWE_O(t92T]L2_:j].^`SL2X5C2l,-\_-S`'X!Y]N;8mr45/Me**D("d+79L!,Ft[b"4Ki-7jZi>$WlfCA:&YFSX=8%<7J(ub(%RWP,0f[$Oq'b('@<]WA>h71U@o(5D6^pAaqLb5/DFA\;#aSeWM:\"-U/>3!O0nOYqt;^_irpg3EB$cUS4m+0f\YiZ^Ki%?CO`scu)<_6ooo.D<GVj5!kprn/HA?"h3$f4Ws_^!e'im!S]YP"SE1K,amjn(O9Npju0oWD8[pcU3=ORWOe,>H5V6%.P];Y?dL3n%,.AT6Zs!hU"2X\[7=hHu76IWZI=`q:E;k"gCU+:i`NEf`TH:@lUIa`s/PHGK*[4K.G6F5_HG$`l&!rVpM2N:LAW@ikiMD?<L@W08%*E\B6>#pP7K:n"52OD7b:sc+@"+.@L]0:abW5f:meZ#*CkY.1th?oM%FR#fh/0jY4!=ho232-GVeMN=Bg@j[Qa(7hsD'VLVB'KFT%;Jt#kea+inR-(hFL2ESl3:8>C7"#U_Qf-inat/9$japZ+I$dkYXoW\?b"2'-Z`%Ps2U5WL(8j-e&!=b-/L4/rL14QaK5b$:5g'7s%;,eL=(;Z)=8"?6@VK`4g+E0^jZD#5f3;J!p,3f\!P?G<+,Z8;6/mi8]AV4[6aJ@GiPr6H@eJ9rC)/X$U_$'&R;A[pBiUYDZC9@m\%As4cP>"Q83<%[e`DPDu^;ML3KT;bs2FHQ1J[)TgoafG'Q,1B[43cPC5`2i*UX-,rNhP6BK9g7VsRsC.6`jgX)m"O\--DKA+#I%eF%@goZ^!Gi*J-ZtUMI*BBo&V;J'C%j680FCI5*ak"FZRf*YK9KTQg9]lMWZ3.Y0tepqr-bdDfNQiK=q^RA%)MB3[.".]_6Q!"f#fN4%PB\Mp$dYK7')\\N3m[l8HogW!eQn$P1VE"\kM%l07bfYV%e\q4<_?M[mg=/O1RStp\CO;O2ih;5J9Ya/m:FBHLFcgZ&%g0?coje:%k+^\R_J]CA!49om(n!#0XHji[qXX35cR.i<P3L>P5+ZpB?Dr_<V]</VLn+q>p$jZgFl:=JJs#K_jgVq1m'FR6iLH5@`F@u2m%X/C%&HCiC&.>I-;8o:".*j1-4dRKqXLpJqbJeNqXp+9\OcgC&7Q5t&9<h)Z=;06I(t^Ag6QLm,,]I#4]h.6n%,<M0iC<!Di!u>OSTuRG%s#b,t`MFE$"1r/6'q?1.!3?qjbiXs&Qa.Z-QPWUl'5D/CqBbB<+`(7rSp'b(!lrK*C(5?MnTHjOD"?u5/Mlp7qnb"XWV>q!*^^hm%\L9ptVfT(F?BWiAA'_$+@qi/u_FCIh2/f7h[;_Ff%KNu67_'Zd?1&KfF0!Wo>Ld>SAdVb$Lo(r\FWI`1CmC;09G_hca]tV!j!U=_%aQ<m`VFG6!0Qs5"j$gVNe1i]ldrf1sF20glc5(p*WHf3$H#>DMRXsuK\9jd,"2Qj892F#0F\QN"MmRFcoqC&1p!Dhka0<m9>7EJp%SBPf=$u`sb:q,9bgU+u42%2NSNq=C=CG^(A17JnkTc.gCo@BmAk2D%nqQ^:uG3'Uf8R6Xgc\p(UIE]l_([N+Z]135I_\Y.NrQMrR%lm<Uk=]t4,j[D_K18>6[`):4RYa&oI-G\r4GS_.W@CI>nImjS9J(T+om::C9@J&=TpAhY,_5-K'RVm'e4(0':%QKZ39ep-hp@mUZ%p7md3dm4,On!pf2g9[F)O&/KGP#SGdgW1e6J:\5n`DJ[SC(%$4V9/86e=bli5*V6cLqq:<Ift8,TS`fV.^QT\79>^PP(>Jc:2V]r%GI7RKjsP[1SIuS>))1h&8VY@.`?M!VJWr8'P-dfk1)SP-$(@]R,._S:n=^\cb!od,K5`OO2;JI.,R<"AM8Q>%(E""D^;tXi(/Zhm%)K>MR4-..,l=R=((&!;'.9f5$0/[pHi8qW&nc]9DM'Tr8^'DYUaYp0-`lY/O+sEr^NgbJ2X2/>M3Dh9\_CN(O\2l*-99QS6C/<OM%6T:ePe'-TFNs(#1k0I1..9p-d\.)#9!M#=($Z"Ti)4ih8X0qR]V*0*c]p0tQ#rSiHQRsiQPfH.QAk&qO#1H.4j)I1hN7Yn"<B!7]%J7D<S(<99Lc4[9G#VOQIa*!c%El=-UKEfIn4,?;dW'):+*&3jpL;]?f38TI)9sY&YO<R\4p"5"H4A*\s]R9LEQZM'B;01lt'TV\A%4h9AC+L=]%p,G#rZVl>l9f';(Op.i<cXMK(JdR\,Oj)U$,@1plI#Q3*B]ZrJ/,Pc#4]"$h2bHRp-<6-R"";DjXX#7`oe<OZ."Q+g%dT)(E(fF!oD.H)3?Ad6ga(5F;93L/=QdO,8EZ%PAND90U>Se\=-PKIl1a*I9<*W@S/r6AP'gZr?`OR47jqu^s($qY>(\Y\Z1IHS3%9G3H[NPL!8obkS/MU\b>e;-gn1FO,D3R^f(W@\RZ6T$B+PU4Y08.9J]Op"jdlRihI'%nSX[)l<:=[nKOprPB,73u)!a2g+fUOm4`%#0]__G,&ei>W+'Ykse+p^BJ8aPH'Bo,d7^g_!oL?"OWMt*t0[Sic,90P$D(*KPZFV>R!XG/<JAHckn"\]La#>WE;1`au)2-T]5,b%0T[TNjKhh(%"T#OUm8S41('uf+`uIuo3k(!Z]Dg\`liIa;*n,'SV0P^?8>EmFo`CKOgoR3P\W")=<3U]\08Po`8+%'4CVQp$l;iI%3lIE*pKt>RCRQP-!nWKp>O]"QMTHbGaLod>oM1L#FTl#X6*<#AoSk:L/7(Xpp@/o/K-DjRWobo+:eJ;#iJ`n.D[:KK\PJ=XYdWUC%`l@+j9^,6T]NhoKbT'MUFuYb?6Lmt'0.JI$9/6Ulc(n2DN6sP`A4ee2dL6k*"=;BodO`"?P"+-D%*1D2/s'(!%V=-p(UZ7ub!jEO%O]N_SAE7]k<_dpiaKYl=XNF/>EdD=p<d:Z.+lGiN%/AD,-VDi<e4#3t`5%[LWYLkQF6&%S<(hiF[?6fgNcO:3d.i&9J.!_gVnD).%1t4Gdmk4igCDp^$;]ZieEm6?WFt=qQR\c;/W!!YL<:5<F,lp'=G`:+G07ebm3<Q!!4V?$)[fiVEi"ag/)A:J_O;NImH46(9=TWah%W?4+APp[ml;;<S@Y/=.dE)!*dY+//:*0X!(&X=#"_N*/Y4<6%h-H7pf6ouZJfj^3XD?APs.7hJlMOfsL&Y/`%D'%o1U%C(=KVf>e%@N=M=p#:q/ESpoO+@Z][MBp@K;.W>\>bao"UBDp7f]XS>&gVu[1WF4!#LZ2*D"X5?"AtI%1m<b=?*HtPWQe7t=)uN>7[!aVZWab6%LG1GtMD/;b+YFM/`0DsKOd4D1B_Fn,A._IPbipd;DL7_R</KDAX[p"8:<7!J9E^9K9`_PuU;A:B;`6..r*:q1,&%!?P4R&W+ujn[%m]sDa0#uN6Er&X<%$*OD&nci\-cg<8%Z\Os&IQMbEqLqX.a\>i",NWYQc()iZ`u#m>Y5fm'AKl>=UU_I8=d>Z@M4jhi.A%%&ig4W%!gT]V=VA(i8T-@e-C$eA+ce0/U%j_M9l]:,KOd%VUj<?c&0P+TV6E=;7<NlV*.U<rP^!nD=A-_(Bk%eA5qja+P[*<A`B6^."%b`'%d(WbZPOK%'ES^ZGD/bH8IOLmnb(#JY^;XZb9'/Wp,LtsN6-d$@g2XA@>d7Q\jN9>p$7Zlo@KXDYL#lG.*K\9HhHM`j'Ec2J-J2OZ%D[)C.WB(D,T9OA"!=Vc)J@fpcjRX:T&cjL`9RMYAR2)"S=Xq-WW0.7m,%6(Ga4C0=0**D\]S*!;T:F;rdht#ZpkDl+*cINQ@<pq1%"Us"pACZ[<[P<:+C3bu=9X01SB,RVR+PIe][tR8W9Zbi?Yp5*7K0Y97ogtGZbstT4!#4ff6ShC#/u\rAZq-gTbXX3U7<t+>TPPj;%*&^KE:32BSFI@*7>GP%fjs-0M95VpDs1bsQET3s/`++aN,KY6u]N^]Ho$"a]%a_ZR;9_L`Ncr[QiGKOeV;hOZWo^ll\7-l.<\?=t%oZ[`4_NHK0[#hQt;CPos";]8)7%53gfOfmDi[.(2!TF72"(]h2I9n[h7sC%sikcrWP*MQjjQ;W>=Z[A%'[KcSNET*/M(G%2YY6W.%OoU5=$W&L2\Ec`2-%3*$##l5^+(qDR;iA.G&M\!#-JIg2`&H]8EB.E)UI6@>\2#][]kMM.8`)(tQ5M^)b#4/oWF\eZ\<6t7P#R&h%=?WU'MiLE1'L;8h7C2Q5Q_^$+<-?"P6!275KcS&G=![?Wo,P#=P.iK(O5kM^:pn*[[HaFg@pH2%bKHmYiFnFNJma4n=GMR*n0EZU%9"b<a2'E_dk;$n?8X8X!aV)i3\NQ*+-IdI0MT=bQCi6<mNNl*\@6oVJ%Q0)l"K$tu/0?:pV0WfuGf`NW0u3$#SBu)Eg(fAKZ()D[%\:`jCVk?joA9UNQ$6`WAU.Nqo&3Tf!X9"(raV\PV<g9Bl2JkA30MZ*UFZ9M\K6XcF.$WP'$n0%c1J#=m'nq8#B4-U`V<m3b77J+?%X/d#&#uu.HEJ]TSaYE`L/pX%e2\!:8FVEeT4YEE6Vj'DO`?g`_M'mNm0&ohuE<@iPSguEV1+kjQ./Ce2\:j\m0j2u*@M<Kk9!n_"%D":2?Ws5':R'Ac8C005^<fs>kdjbtfG?RG0p.fCBW8;4t%b3YC_kDCSFZ<@hZj)<NSQ9a/\^N#@FgkOCU?5LW8CZG[A^'5DjXn:r%rr7jBs*mJ2s1X@W]XTTWX?/fgY%X4H12oGJJQurpiJ!SY"O9,CE[5UA-0(+!U=#e^+is?MF@S[_WB1_j8<nAiEPZeXM85+o#=A"H%diSk+$G>dln8_u&rIIcp`bQ*<i`K\YabC$e=BgrG.O"16@P0"AVS&'s956*DRt9c119jmcZ"R/C)4B$H!Y(H+#E+<O@O5tcp-`6H%7g)kSFff&6I?8&LLs7#>5H+gZTOJ'XKok4d*--*OcH&;]R\0d\C5nD%+]?+G5QuNL-e5ZDLP2#Z-;!a5:cd7ULm*GN,VDs)\>A75%RLkaY/K?KFj$J,5plZ#J2k,nj.i1g'ESu_iH\i+:iOkhr'V-bp:4r-k.3FDqZHG,mTo?KPk*!#]_PgAJ#G<3%O@P#!"`jTWCr%Jt%aW]IHE_/i0-&!A<7Kl]_5Qhoa.9-QseV==7O<!MM+Scse]2FTQ95agq8LlIk*C5&p'I+JdA&P27,q'Ad6@qbId_6+%1g`qZZj;@L%U_k%J+MOCuP+51JT.<Et`KY4H3fFX?iVeRCVXo2M2=HSrNTi[q,\ln$o6=M6Y^Uel3hQ+94h!)6c*UZ4iSAb8J?F?F&9U[?Il/Ol%^s6mF\PiH3\L@%=A**:m<P>5W!ZtZFYntQmO^r\C.1[/"$,\5q7Mn-F98%PhW72Q[HBSpdk7hRH9N3M,JhOQS:p?hk?`r[;<imsR%#0sa>i%i6s=fF,':!P/%Ao*03jFr3EV(V!aGV1.<+Ghs]_I%^Q^lrO_a+m6k-^[)T+IpMF67I$p%Sfl"MR0STifK\!&9akbkr6_$%:pT2?O91K*";DjM6LLY6,XRS*+DqL_Xg$EoqV#Guj"X"_9HKfS7as8]oZ`aC7-3#DB%iu.3\kuWjJOB*YV73/b,K6SBGU]9FHJ)b%8VA(`CGU!O:aP!OP/`_ShW/BAaDQWN[sqdu=\]Gs_;0>a/#_n@(RkX2cH=hSai$=&[#s>l'F;+Fimd0+:#CUPe`bD>$-4<bXCco!%K.T6R3;o">'II8Tqi?3fC0qF9jM%"iW<cL4d%F\G<kgro$rn8c5AnK91-4W?FOif&dYpu'p'93o7!"[;K*D,C[e\`nc!A%WHedtt%n_!9q`i.;N9\m2,G%^*Ls348ebV]TWIW*r-I.^]Ace<V+Lq%a)AF;&[)KU,@VQ8SpEqs[(Q@TQas4%t=od=$*\Z9mi4I#XH*<"OR%3Le7_;!tsc@aqi?*e+c7jH[knX"CtU\/-2Ym[>6lgpLjkoeSDi.ebEeRG=W6UMK']T[NNb2;8'e(HoCHb4)%br^boO&#J`NaCXDh%c-CG-O54c_J+lGt"8(?\0dWd76_W@m(uLA#l29!&^MZ_p3`C;lo00S%UbhDFh,QSeHoh8kfRK!N:<3CCmt-<E2ph)56E:1gs%JXp%V>I+RA_=gf'.puK+*D2HT;_XnR!&[K5I*P4c?J;?`uX]^_od\b?.:H5puTahG?R/%kV'#!U+65f7[0e[rT'7ocUr\MImP@T(I*Lp%.p3T@j[q)A'ocY38>H](FPpM\`?@2B"r!5ZR.laojha5*]G8kEZN:21OC%?lJh>g)AY<01d1(on'a54#b@iR:@2i(+7=PVb(d+mW%J3P<PrsiG)>*ttNQdC[Y-ZO6N,&RBB`ZU\.QZ*:7!b-.9Zf!KdMJ/9"R6[>t*aBGrGY+@=KLgnVBRVYr+ga^8F.i-3FdR<IF;\mI%,/MGp!5\\VE?gkAe[#ErRtS]=*J=SEYH2*B=pSn`r4aY4s5fb:?#O>?+i%#(gdnS<j8^T[qsUEDoF"-<-3%Hm`Z8RE!h"C`;J7jB%E%)EP6BI1>KSe[F^Ke.gmbirLX?;n)(5)WaSAqt6<S9r!X]p<5U]62GIh\s>js;_A,Cj,*`e7T.\*iXB8)3Z"94T-^cFOb,ED=qc%J4(5.':8n;,RFr]H-uWl%[@hdJOP246LD-/4:l&I?XcQ75;D>8L8h*]4QRa^>D*#UC5+3-O"1Js`mnNeS;7OX*^`1&@>H%K*<8^'%@;7'*o;Yo4a-b[^R;%k]nsn\-;8_:$1)dN;:3`bdH/?Q?Z%8OOpL]N-%JSbiP!m7`Kc#r_4.Yd'Ips9tn1[uK9@0a"V$p11Ei.7q%7cp3>k*1_`(Na)co7$t8R4E;8)ZP/;s5HeJQ&\,C(V+5g478al;XFuBK9#l1?55r1VLs=nD-$k(06bS#NoW9-o`'Z6?VkNJ0po^Q%9[DY]mke3Z>$tG??nc=,/lfhL@^k,0FO2(<+NdCp/($-0b8pG%L:CqoQ(lg%H"X:VeoFEi(16KsEF5Jjlfd6,@n-&G]DOHo:ZN!o%<_=/QF^^sSYV2G2_K#N*nYKqF/m.!u3sr%D-di<M6f$`Kh*`I@B`!Ws3-E4p.l$'^Y;h8a$1tGQNQN8OEHsBX0Ba+f2dP\aLIl"&%/SaW"BGQ02$-"iQD`pk4UioGIZkiTscm;AZ'?FQR07f5i;`eQ[0$`k-%N;IAT_n8[&%X'4o3(26B&)&\g8o,AAa$.QOSbK,LJHaL%SWp>GcqS0tQHT7`V&/r&5.]E#(o#k)%*&<jn%3M9NDZn>^2(+QTM2^5dHVr5JM0+P[sn7dYK9!^R\ATn';[((PT,[pkX,!B^/I,2%Vkm/K?_*TH7.c45!uO7R@DH,'616MPpI\e?8pHI4m=mg=Eos6BHW+lNODXD/#K-M\[G6X'/8#\Q,u^R=W.,*c,V@t\U4Tnm3mS5X%OIrQQ%%H8X%.jKic"J4eUW).(XSHjO1$jk]q8U&J"tTN<fN&_AfWHDof;4sV]0d!0]5=ON`fg"eiF%="K]%ng""jYBZHReg6Kpi%%+M&d6BMRC0F5S\@Y7W%e1s@'ZG34cB!do%hf_#63FoVET2ts!&Jcl!:2LS3be,&>?g=)'mWAGY09h3-U:&E2S*!!rI:%H-k6E9(b%[+39M]&:>D9mVp$E<J#9nR2n?%7T\GNI`CKh#Aqr!V#1[plFHME4*r(oY52ss"Ra%=/XsQE[F@?U^gjCs(*^DJR;a7^\dEoQfG+*%/6#a3s4]G(!e,Dpc1-0F*gSkCq<bPM?6dJoU5PR2,2n$rb*EhTFS[>ob3Xk@MS=)-NkYJ>liXpp.>setRl?WaJ-ngCV>mSNm5LJ)%=RF?4-f5/%+TBu$pof&k=5DBeX8s4F?p=UG2tl]Y?u%JaUuB)c&t1@(q(K>@TlW3jDd=?ai@jFL>!"dJ2]*]5\8(_-D=fpehhN]K%.[CU_@,1VC[%5f-)NUu(n@uIk)>aArfD*,VZ>:IOs$J#FeIU$D8@ZiJYcM'V@\<h;R(,eK;/akGFkl*KA2,fXP5'\#Znq#As4),@%3rbV[$gmr+dHhD?F%K\i4S*Q(!n#hkcC<k6[-_aj#NMeQF\h,:k1I"!mE"U9m+YK77\#BVJot-i"i.C@"ou]Xc)$2<\XWT^_XI)1%@l0Z3d(Zsf6.>M]mTKSiFHgX*d4W!X@+Re2%Mo5,j)^GnAGHBih(IiR`S>mnR*@_Arr9eTh05FCGd(#Z@H4q;XuisCLG'M#rl\rr%h+,-so+"rL#LdPEc9EOAB#Y+dhK1<@/)SNmVqk\g2&!]<DSFfo"J:6jB7s*4O5\lrTui$>+WhMRGmX!I)>!5e5AYkY1$Hpl9uG!;%7m]!b@r0S,X/%LliQa":@g.5Mr\KuN`jiVfaA^kIoWM#*NfHf>0kcMLbBpAg"CZ,n+*H@[FP#`&cEQ8S[X</(SQgaG"<C'A.0"qf%6P#m8iJWP?lc9%j9IHJS21G%Y\L9D6BKOQZBB=LqLPA=^8P:#Hqa*e0qFj&GlD`?WX=frTbDTjepDodRX3NqUJu7j>(cFJCnoW[S%%m'DI+2@ZS04W<BJC#31gR\'/nT%-;`q*2Z<_mj+V9b9<HTDNJk1@\]06M&h7cV%27Y72-:@`kYB):UAG?g)1%UIH!N,Eg.lDeS`%rm)jk53Z[SUCQ<UHf<=[jtoD?X=(K3%WKAR4,c\n.*p"`Z(4PQWSTp76HshN#=D9JUPqXfWNg([DVe5\-;8W46MB5af23o;GP(hj%YD9CK=/4T>G3m6gYUt7AD*&orbq[sggW)PZ/Gb>e4`p)kANq"E,1%@[^U-JG49+RSX9\!Mk2@1%2)Yhp0($Jcg)XtnTLH=5ilWN!%`Y@7BiD4^NR/Y=Lh/8Tnaf)gI<@'%^n+h2ph0761WX,imN9EX,D1n@P]*<#-h?qaHI<A@>mlg<^S6-Fr)%QVB)D;DPXqS`-pIF&E%e'(b89$Fp*Kh-X-5M0_em7nI(H]>JdS/C;3hrEk359DF*L6_kY:D#^A%UdSt,jWfIpO8M&C/*IA3T:NZcI(t_6(_;\26siQUsESu%P.;!BZ:;D_#+b7u./QT'%C&_9*7A4uoH$eTnsCS\&].A(bGOTlrDG!&=l95&5qfVDPHXNKs%%eq@F]9Ym3D&Pi=NI&e$-^@28Q-,%^9@HV:<%@E>6I)hg1Pm$d*Zsn(8+1(59Dd1`Y[+(2dSp_7R!R13jq9B9#%66EOG,bm`bO@OV>;RPA(k,IPu9WGPXW_D:Ys:Q+5S`%l+1S'Ai>:@1rYf<=YP-J;;F1P=tc>Z.B$U'Lrc@ZM848Mm(7&)#fs5ehcY4J==@-chcG4LE1IY80XSoY6\]@!EA\"X-&/?kS+sDD%GB+H%B(LT'CGKU.'2@[;c)C9@*Y<IF><4Go*A$l;HdJ2GN/Y3oPQ%irU%,0?RfU4HK+=3A<2i'XBUuq31*_!dK=GJ:pFf0G<]:a?%CWmger=j7/dog=BULYqm$pA5fr<]3gUE:ju#J:+]1G`7mjg]Sep^#.0<+Q^-<%(i([g)Y4VZN%XJ.FP_U:VA>2GqrV.Y4D!cDHRZ%4;R]BU)(%t;3Z!Tl6Gjb<#SmiQ%fFQUnXfeJs9i=Wg+KTFN]4:,:=oom^*<0)Pn(*@&$;&[>MH@=B0XVq]i1"JJ[$6la2'9HnQ:g%_#gs*#X<*pJ&j:VI,\NKja?S#D:q-2oQjLPjcc+RU[>0\[T""ONS9]t];tp%+t?Fag&A>Uptm<*\@_h,Rq[mon]b<n2ZIsboMU1<%J^kNu3=lP]0o<NGK1b0Z[(+'3Xc#lja/`Usn>Qbth0_XZ'HT?\LOSFDcCLXFqZ!;,K@t,p>ZaD%CL<!.F4BCaCkQa&)qePk\VOY#%5drDuQk7_8?R@W'HbQ<%Zs/kZD$ER[c,REGpnqULE[nRDA-kOlaHAq%FX2%YO/j06f.*BpOd0T2+gEqo.]Y;FbFj2!1iEoL#hT$;%n\eTZXt3(Vr5Ue6$MmGs;/^9i(;j32NLe+8,Et,n,H+dh<jgph.IITW<fCDHEg"G3iX06_.tO&p<@kLH544n_dKf#_f5)0a\up5e%&r[l@L"/,I9b_DRiMedW%h["Wn+$%JAud8br9V]p(MEPPek,%;q5(Yh.rCFHBl2QG6M0K:?3[b[?^Pni:MPbih=^sC,$ijd^iXKe%elDf!G=?$I+J@pIYE.["bKhiY+mBuQl$PW8NE\A=`Uq]@ffm(<Z1Xl/DAu]LGeKHum!BIb,^,hU&t)hR:AM@F2HGf0dg&1SA0a,9%*[phC(C!4\!j$C=R_-'@id!@u)a`i&JJ15SQ_+#FG4J_$X_uNniA0ZTm(4ooHM_uNG`4EF<%$oNiP26BB&de!Za;\?H3,aYTe16[%d#9[6?lmYLeV^bVEq1RJci!:cjZNs!(<:YR1gb!`W@mUeR8L:LPJ0'Q*G2Gq$bOmP8Rlj#Gkc/g5HcT*9Q7qaV,#\K+huc<'_8g+%f/Gfki8f.BNQn2EQ,)Y94Gj/ZGpu!]!Kc>R-9/QH9OEX_'B/lQ0jG\_`u\LB_Y!MhaZgU-[Gl2g\7Gljai&Zc5nfcDEnoOAB0Nt!%he*S*+*G:]@EZXgb0rVEYEdeeG:.ht;nJPQe2EY[ZsGokk@gC/76Z+rFYoZ/npQ8QG:)R0KBaNBc8+KNd6HN,'S:6^OXqU8G,0+A%a6DhF26.mFK,4q8qG+'38nII3*LCss'^$"^qtOfrYB16VEDOl0)`t&FCOtM-rbMAMb`9QfP/mf%c92!/))o/sco_Tma@nRO$,<HX%oN/f"C%'[FqFP%lDqD0-4=N=$qJ"?dM>)8ci]V*=l20=3a`::nIs'm2S(-Pj:6.NOl&>:1c.4ohb3Wn[LJ&\W9fb?A?AC'YNIUaB%#PA.ieE't>CWues39#6!dn+b@n$1^Gae30&.9"GsV9L?0H-s"smbVXB5;l#NXT$KZ]/Na]8^BLhqs<E7c#hC?F0:6FKtG*Y@.*id%p5(/.%l;I^ITIVhYD\SW9U]/A;dV]a11:&odSNc2'[8t);MiLfCFpVJ(ab6_LE@218O'(j?_a(/V!/)U..4>mY@1W!.%PhD=\X4V%(\OV2bpP[F]ZkW73d6<M&VVCW<c\2'hn<I?CskR`O?Be82#_WBqOG8WT/9TP1I[G:6"eDXXZOL.@de3Uh3q'\']7c)(6e=$hOi2<%c7g]97@ps(S-;,!bU5P`1'\h,U2GkFq/5\$R^=.,):3_V'0CYcOh8aO?@RjD[6>ZeV*p,n8WT/a4n"@*]1.TDP;4<A8kUh`%E"ud%(29n-T6Bb\C=54cIJ>.X:O;Q#9RfiVmS#"1V@K?a<gp4WhnA;SUQ!0f0-R4hiSQA^o]j)1oCD8BWKXp+RV<iR7QnpdX'_.<VU_JT%bequlaF)E6eEc\^(XkmpVJCUI>jb]hqXAL51UihFQ?bU+b,^`#[:lGN4t1ll=5Me--[iW*\ZhUr],kl,/LGm7e<5*H%792m^%n6.%Dabga3pF[RBOj-fe6<B,e4JU6e)&W%VU-DkRSG?fKQ]KB[nm*")@[W=c/Ku<+\g[Lq@/e2jn1j))M`Q@mbl$-Y$Yt$q)h>_@+#_+%UhJEL?^^-L&`][nnc#dMl23Agp-l_scYMR[:F=?;faBql$r1I0-Q\X3]hFVB6Lma0=Mpp?A#]&?SkOLR?A/f`0K=pFOI%<*Qcrb"%-f(7e)pJsgRPh6iRd#dme!id=bkRFC^Q[)=F.01`%1(f.G<Tg':$jc$GWeU\p\XF>UtMsH7?4"l/*ucAlK^+cr6r9^r"Y@Nr4^.R%BF"553Nkh&REg"(@JHB0fFJkffoKP=FnE*5AGL#8I$&eVIpLcVJNLOA[/=,&C:kWjrgMg>T3GpB8j#cr0KS;H^FhB^].(p1Dg,C0%F,OCZoDS9UqjEDJm_Q)?q"d2$QeBh?]9>)Ng:XMI/:W)h#C`Q8Y=f^ZoJRp8bHE!po>tLc?U)6mM*81P-&d8ubEI"jYC@V'CrPts%iD9")h<J'pW_+bD?u5Z59.kDYAGL"Ve?"t;Ibjbb?b@F`@r/oA\ScRA^V8c(G?CnQ1ELG[T<uO=r1#2U+3LWZqGN&0*N2tMVp_cZ%n<)\]g?7-t7f-sPGR"AJ6A2mSkV.d:bPC5t/_Bm"JOV/2Hm50N_9%#q8^d0D.qp1#c(<>oh>:ra<qALa&s]G%[pt-3oYhcjNb::c%)j2]je)pg,kE;q)\\Z5.F*NsZ4i.'PUF5j+?M+Fcg,4r[`P6s'.\e6`POjI152saP@D/#,7&pB@3Yt'0l1g%k98Hl8`"+kh/6BOl%`K0h1,Ft:-48I(8DHpN%r\-.R^S>;M/+.?]a5rM4kHNm`pC>-0(E&.nrEQ-G86_g::YbCaR<tnpp-W:kF78NemH=%Dp,qsgH,bjh%o"28E6*aVPcMp?ginc)PqOm'8^$T/c.+Z9(_P>t^)"HOY)=GWFG)+%ApJQfP?Zm(GYD9`X`:G*DA7RoN*4n`%S1la:OJue\7HQ?H%4!_iNe/q4bNcXL'bO<qjf7iD=D`?*/DYj0A^2u!Lc&)Cunc7i.j552J:mg>rnbZ'g#56u+/H&$?geP*denPpN_./@(7qDdIVRmGP%aa]`[LT.*W?N#K`]X'bm#.V"^m^%Z2[fT>bf,YW"gstl[JO=(/D!fKt!tBL/_L5:t>s;0rrp6<Z.eQ>^2]:+>&3)G:Z(qR<p)s@+%n(.&,!'(6V4&T/&#4L6,3pC_ubqTor,+`.+/`r)FS2?<IcO2Gk"J^\0(?r$X=6r<.(W:'[9_*m<\]2g-`SR?9Wct%*RnUl+ne^\'%`$lE;K1)_[>6`n-Vu1iGs+Q-q+7TCu*W.AK:6S\jm2F)U(-"<'*$ApqLB(g$YPMehCX48+NF'Fl<nd-T1AAE$^_JObRHhRD/Ja#O%Lc"<ilSic\hB/Lqi%a9T55%\HE3Gf[CbpYo)u8d[^#T]G%Na#*AR:P.d!X!%i+:t8a\^J?,HoKEi+7-jJ&':Mceib@o<deuqcsLf%Hn0'MCIZXp^bZ#Zck8<?MZhmq#!@9"nYqaB]G.H5]26P3GMdGWk`7g2>b\hb=Y:>i9(pGNXg/lN4)5lPM'anC``[QmLU[R*BpVX:%rXuQB&&O0JG$d_%e%QXu_&]%$(BDO11/p]>Ht=@AI`\@55m#I:jo/-t^+ju%r@Tk,)#m?$e'GhGmJ@UR7?)#V?1iO*5@TDrKu>GC%SHU553Lr%T2PiaI#^"JM[^4TC9b=7Dit;]M:O_0qJuAt9ZHqMVkUgp*>R>s.'^a2)U+*RW*h4(PbY6l7lVY"j5]`f37!b!?EH661%%l<+2mXF-fG&Gs5p`q&L%=<fN]?=t]i,p8.GUQ%Grb+FU!C>n7]Dl2nm\R'Y]"Qf\0\rd)3P7$4M[@BuPEkJ$?n<CmgrXu26k@OV%_g;Cu"cnE4F`idN?2uHK$^:`a87nunJRn=P3oPp8!biW6<`o]%$HRY+ZiMfrI^-lE^<2=HD_G-tb$_fn-MOua_iZddV'k0rp>UKT%]tZul`l_iP<Sm!EO!kmsFQ9pEAAhDRiJQnKBc`[Xd@<\#jV#G3gcEZs)"*qj0PC?+W7IJp`m-GSO%$Q3\hg$4*IU(8;jKUE`tiFe%#M3UrfC(W8Am]o\nD/Lh2>?.!d89R9PpT(@V:h>Kcc56>I%&a'EA"H_+?K*s5Jhej^<PcI*HA>):/H5TIRF^sLr[b-ocBKk>3L><%gAOYh9fBZN1ua4,?bU]m]eAC%[eE4dP&==R(L]qm;C@b7KM[V,M=!@1TX=)BQ"tMfD:pN[+sh+#fu)H_EtD&Pk8HN84YjIEFEsF\%iKS3G*Lq&"8coTVO@dL/Y(FgY$skYY/ph0Gr8-oO.e5dCcMW>f\>3VEcW)mSiJab;]d^;(AY6\q9W&a`>T0<RI.ug%<77T0eML\#%P_sk8$.%e7n@U3il9"mt_:ZkgNq=aJe1ueSGSkNBcDmY),Y(Lh<gJlm`<H=A5$81;@c90LMMeQ5JFkRm])-d[gPVuuSXV=`2Yo-s%_QKd.VPcM$fHX`Mna6^)DmO%6pQ[_1jKG_8Za-h?:\oLUZk"&YN!u&>?3nU.670bKD)QDW!%tG]:<kG1npRe&?HL!nN,G4BG]O+u%A>OLrjlP@]?KrbC->"3_].@LAk`dWB@idV&"jTQC)rQ?f^T%K//)BE&nu49,2^8n"+20C'Z+[=2/m;*I$[WVWQ;aM@cE""m0F)A:%+9DVL&oA9b@KNIkP9oYWd96f?AM9Cg)+kX4WM]F<TL<!_q\%^XqY'Db+Zebe7&.9JBZ..FD-"\]g3q#r4hP$*Kk>lj]b51!N/><n%npOY2?T#Kl:nbF5JVn?>6BeK5"=PcHg<+Yt)aH`n(r_opkt6%F*f1=?b#t&OlQEa.ghMe(VoeMbb(t9GkIa'Z;0:CHUD(/LdPbf7%ZMs2aXpd?DMebU)1?2Sq7XSENY@oO,r*fW*6r3985/U\MhU5Yombc&a^^=TND.1ZL*F@o:TAFpib8/rW#QOq*HgpoC$'NSskQmFC%[aB\;OS8dSV<?E-)f*_plh8Y7B!JX(=lqb`'2]j3cYgn@TrW;%WG6^$f.jq/Q%s27D0BOLq:@=_j:L*$,Ca6!a(X@837ngXmQrS)%S%b-fj"ZO-c/J?tg7kJU[;3A0G=%eVkH'64\Tdgb/8=]hf;I5^TG?0f@bN=@S*3oW[uJ_$J&sB^E["bqY:grZek0Qp:NONLC`i,\%2R]ZmlA5/-F*T4+3nXDb-KZXD7b5Dc$H_p$OA$K%h%rRcU!nfE8e'];r@5#2o'3cV*23^1b%j<%54WfVKbR4E2n^0:*sVkFS7GgH%#U08L1H_lW$^M$*FKc<S;Q"lO0ADRg!2RE9IT'Dq7+eV,;S^m2\GH%9NM>B>/8HTaH=%`5=BsP-)%/"E)Qd<GHU@!,a,Y6Td,o$'%d@#u"oV)_$dF)tBc][sUOh8Ak`?U.e\<sG+CKC:B"S]@dQ`#V@H4_8*%>kBH0*8_S;g<^J.Sq_Ek474HGI611&Rs[H6)S3qO1=?K%bT1rhprX=bhh.?jE:#HiQLCC?Z]$-=@71K=_^;er+CP<K/A&Q,T$3##PULN<o.4CDhJHp:!H+3`_U(NjYJ2SNb:X#o"Mbl/pfSpX%k&F&?1'/n8p+0G#/F5#sA*8.qml=#M$!Q5pT&nR2TJ5-I,@Y1d50GDdZg+l5k0IW3/AmAsqtSQ%b9'ZPB0#4OVj90c1'6m_8QbH*%mj"]-P*KJKl,glMhpu"/^"_)%,u+B+DZ/C@g?uTQ0jWbo\'e@B\!u9T,S#8j1pXf,4=a\ZCpLAk6od=c$9r"WGJ<r2Suu[/5;)h4%cX<lIbI_SYJ#[EglN_l2Wnu(]^olln$7pjmoU&`MW*Dp%a!1EQZX^b6P%B;MXbZtR<@Ve6M?m]-VI>!pDD_8Q1GYgQMVS.krJO?j%FIP&gHYr(_Ds*ht\;N>Pf@%c<1qh1Y5Pt*3W+9"R9ZL8b^\cHcV=G>RAH+gfPc4kZ`gOG9o-t[l`j\Tc;K?FgZXn-_SgQ@pI(6g#%4^IQ11=:;AkY`s&J^]rph%T__Y/)2gBIcEJFUlGr6O&CB9_E&N/[QQp>HjCp6tFm?NTs*7kb"H!H?J\LR/[K[5SS?7ifluaFnr[N%/d,e6IJ'GuO2%/#Kk;aH*,KtCHDg1r9tt_%dD`e&pT,X`'`FnecZ$t,T?Fk%1We(h]Mj2:*HAVs4$pEBS`2Tib`aI*=s-+3S8-!K%OJqDV'e)58,m,qt*YRd(hUp:Y8]ab9(!(a/j0K0T"e13X9@tp%G_)X>nBMV*IWtOQ?bED)GO%6K(V1INTgJgjPSoE/Nb^KZnFfMG%YI8K`FN4A$P$UlCgM\Q;'Y%W[2_SeX)sd([!roC=X/m<YI<ZaZS2';RCl$)+XYd$#X'%[J)d6n&R(l<APuJ-fVf]6.D+H>l>7s/h%<7=A9q%J^8?O.X[_jOa&oF\J_FpopfNB*lGQo`CeW]4D2_4(a*jo(m<)b+/ql5VpA%k5CEQf8nUZCf."W&9rG7u].#;eU]fP*3ub%93??I<3ZQ9.*PT)eg:n)GnY`ZDiCc)60'L;:rh\E`UGMOKW?+.]nNr.5Gn#a7mrCjA3$lG^Eq.`UQ%sp1PF=Vh^/PE#6\Lc9=q-@%.YhO^"Mu]&$C@iF)dEr,A!p&ESIGYF-sAbnZD)"9OqEpF;Pg.%oq3aB?<m[5?<CK!6R'(Bm-SK)XZ2Wg]3ffb434s33m)cie.lmB%N3-u]1&&$[6OKr-a"\2F?/[A;70+Z+b<$/0:0nRa=s7[?=^*$8j^GLM96O[V^J/T^Fao==gg1X9OsW]\*_pQABh!<FI2"+s[u+:k%B6NU:I'=rd6>%<[UIZ=9mkS%W@g!>%\'l*)4RFp^K#^&eKKePJ0doC-9!Td?"\M[tQ)8quWF+O#A[WZF:ekc^;L]4Y@uF%`(j.['%7_I+8bOXu*n\-t1!EsVQkZHE$p4Y+4cmmGc7^EhC82a&b"OYB;O\Dq.Xs#+_C.+n]D;OX-d,bD)5c)E:!&>RsO/o!QNG5\Z8R,CP%T:c%M4bIM)X77?<?SJ+E(nX*p1T%DMk3&C]^66R2jA]:9rGtR4(F7eT-hmUSGr9/lR>B1)$d\ECj"nG.`iuB7<\R!5H;o@;l7gH?%<\D/92Njgm81Vm)Q9[#@"K=Z7BG;2SW9=Ql8?0mGJ+rUK[Y98FN(cks1ZnNgK7rWVk%<&L:36"blPZ61>[D%dga3;qEgp<u@C!X;%WH0BD%$pYV$[Yt(<S:/)*j@Z3H/Y:Q\%&oXcT8sq[8+gj7XGm0ioFka6-JS-J4uaX6Ba(h$,l,P2/j_9fmuiR7@TBMMYG?&I)Tq6%k]"Km&ST>'?C4/oY)#=`n)<h0d@'@_bXr/UgfT9-O/uutQGejWid*'EO0*N9d>6't1`(R^k$F3.VDq[.q?^TS+XDt0&t7\G_C=i=%3XWbg_]_E7D^2L0jTV;8pHb'0Z;@6sOR5HJJ!Z)T<!YCrDMkp*PFpEi[1O!;67HDiW:]gcCH=7e4X/r0>*d/iM)lBgl$_Q!.G)g:%q*Y[S\X'3+<f?(M>18Pc$tEU6odaT![#tb^A)U]L4IbK9\`go:2frJojF%#c`X.mX"n]sm@^VpXSZ1XiH"b<n6S@TB#?<TEh8P)8%d]eku=t<5G^qGoa8eY]G)(&PCfWTNK;Ks_FJ,sNO"mt_>ToIWHje<)hhDCg[E8rq1Qo\$JA#/j^OM1?*>:D@[b;moc7\gRd21<`k%/B`UYh]8>#AH\mDInUNrV`o4F]5O*gi4J$:0\Ok/7(>Da7ZK[h>TM3IIN=CaU!DD&3MK[SqUCJU;6lZXM!C-5bNrD/\W=N^WA,".%'P>$<A(j>re<U]&FtG;sA9]XLKpQX.CBjN&\!+3+#;7ap2pFMQBu64-;a=Kg:SRc%pp+D.!d1;_G^F)I_Jj<F)f)N;c@5U$p$EHK%C$J:jYF&gU$0##]:+Qgo3'c"ckMTO[ic/"kXLW+9I<'5%H3dL?*s]R92SBB:QG,FA0*8/C;kGUV'\CJ8QWpF;Jn+<@_jFKaF'@J0%E^Ps[mj7A[g1SX?1'5-7K?%KRWgDfA/C+EA\Y'O9\BSY($&\B1L&EHHUj/2j-r.ot\Zt`lkqf5cQL,lM\+;-q[)KM<9+;+ZgH<Z6%b`bf\bA0;b9,\E_^:^:T\Zp4hV9G,?=\d9uaSW#,INl/$r%(c^'[(\!>W@hqk#lkAV'r?Vq.%!^go'sOoWc34Gq5?&I4ioXe?__F%[>=h<:\nO)IJ4>,5C9d+5"4%@M"t@#mZTsMs-V4rnQNkZ9"I2+hbP3e8KIPNE;[L4hu+9P?$0>ck00Lkdn(;db.:$D+.%Cj0-#$C%YNSRcJ_q7-$8e%\l\#EWa.bSh<@^s[T;ullqcn23X]D5h=-*e;<k/$K+j2D!]<L/Q<RV[ZgjO;@2bd?r^&-mD;JF#T?\rC_`p#s9%OLQ2M"do5"agFqP<A0]7p>,*^+C_nh&^r%mf+Sc`+/Xal%r3&3bsKs81=\#GT+n:`Pc;ZeJ,=r"%K0Pg5:KQK-rXutQF.*#>HVP<%KrPSnWZ`%p*u(_5X7X+(6Ic:u>i%[o<#s>PWCC\!MaGqui33]7qh;$ZAZFkE[k/Dr2O(0F0=="m<,J!:Wal&pTk]*D;l3aG.VuRj%[JojHC>cR(W-VIi@>?O/MaGr@Q:)0pZXKPB/)Z@a&oF=Wg&U[]>n$1JKrPUB/a)D@'Y.la<Nd+S938(Gq5BC_:`$./%U%ALWODN0%Ucj+&KrU^B/N57\D1Y$r9&D-[O4tljEct;+bG;foA$[(8AeB49#[C8u3+WD8&:<f]ZaXc4YmA[Qd+^-PPhomK4>f*f[Q9&)B;p;u%p*r+*Mt$(U0XdO:\VB&/9rt'eGkMocDCEB..6tcIZ<;E17<#[M`n"*m=TiB\'rAC->[]WPgS0kY.cK(15)L;5B2`Kn/?M&,iRnp]%g$5\E4$9!ab#tm$5!5=GCAC?Xfd<2%%*l<D@9+5m0m:t2'jECT>B=P]K!T=fKf2&?KmhVs4PLR.H<\9fp;N0k>qoEY=a9Z&("d6;%ZRM7N[49YZiRnp]fii1.VNL;t_:e-c2:mOp;kVR]5C%tPCl70;Q*$e(iRnp=`b'[J.u%\8"D9gWKqet#V?kJuHekb<T"R&%<fE\n%%*j%-0,.j8'X+m%&uZP?0+B$QhR;a*B.nmJi]"SkGW',DrJ':acGA1;?Y`bZa65KR]i)2\4%emVZQ.fTlIkg7l?9SAWTo==LQ,LM%-:<_,/U/esc?AcchbNQTogLdBT"Xi8k\=a/B@>P5G.&7nCDTK8`R6:hf<R=2(L84$a$=_d7?-F-2=u3qe]p(teOb`c3_"ifYJSmh%A/oag'#Y8oo__d?(GTfiWHHAritP\,/OYONa,9jb`4.\E[M^g6Ka`_N&`^59%QB:_fD8bN?,S]s7>&i0`a'&a8)&k;?hPW=Mhl@!%_Tk!jGZtd?C8>g#ntN6"0tqN7]@A+Fm4l&OLiMo[?9`Uj2IbHTHi9FiERW#*X[e?!k9AP(@U("?p/_jdG.sa+M\oeMpYaa;j-J6$%[Mgm7S[]rCM")5>OuA+5?h/dJPDJ`\S2#nWE>ST>]0XBFmYq*I`:tf>ldq17\#<HEjbRoH&X9&uY-&]umd`!^4PtV+pm,Bj*$WB[%-^d.TD<6RnU?f-pH+"GB::Q5G[a8UuR^ROtlT,X<k.6If7uVBTN%NeiQZE\?(n.mB`40S/d:M-iEF[:s^PNf:cIBGMLiFa;l$thp%g):R`S)h/SNu3(<'YN:mfoW8#;hVMo&2A'&QY3oBj7[,%3F[BdphjA\+Od%qgPZo()Ves(dbB`u-T+d\pYE-9(cP?[^PNeO3GThI%&2C=a(j:\C.d7i`j(me3=tsLA7ROK#LiL@m.l$(6&i#E=Aa9[GgPctN.tF]t.sU03E=0n1(*^amUng52(rs7,),@iHLiH/=1TeN?%NJR,t1*!G80trer^37H)8WJTkL`"/E6P%qQNMP&"8J0u8YBc!%m7*&0[4!ciIhshWC)P]N`40P"TiN\H&M]=EqCG:pD_#:%\bipV%ipS)2*B`_u'J[="rirjU`\$bBfgguSj2iWW*+HgZ#5;InLT@]=kjJIRFL^$80_SSqiG(TDp[=iomFSYGk]!r%bPQM2iG,UaEi&6l%7>IqKiG-lXp7oN*i,htd[i?D`(KnLeFLWL"rf<ek*@'mZ&fn-0Bd95Lc_A>-fPpY7q2=HUkt)`a('nE"(*0P5L6@en-dgmR54I<d%%QEl2IhWo@e1(>jFSPPZjk3(XY7WFr7Wc.Wp!Ts2LT@]=C\[O"7u+.g26E=PV<Dk3O7#5g%QF(EhKj:RC;tFQZe-Zege:>o>'.95%40po)5DTeNOl:=C:[:N+0?*G[8TZq_s4F3riE@md^P`S/NdC\_k\rU*`U-*L4'?g;'-46qL-'Y7DA4+/KsC#7LT@]=1nMVN7Yb2m%%rOBg>^bq7BT><6%Ta6ZaK)Pqk]#&ialWK5k]"_QCc+7YN=@h<Z#)sc>OsQ'N".dn`O6j/DR2!#N"/p!_md62<i*DefU!=FGM>Z9%)b5[aRr-%6D_4"Th/'<Ps&F0N;\\D<U;M,ZfUkTf;rq"e\u"&[/LiW(")6^t40ljl_W@%g,_d?*!l!?cpXKY%?<H(_hYFS]Gq$(7%W3<l`LPOIT6WF0^PC!PZ<PSIM3ZP!_e#tJVp.D$K9,LkfPg]tL[.u>E0t*VJGD2Pm\trPen10'C/VtQKmRYXrdOg<@[9oOPSlQ7D%eOcqKT[q3DAnC2C("d6\4XkW)=Qu";%]iXMo:&;9esu`=00cl(oIgVnqSlO&$VOoA(6kFDg35-FULbck"Q#;<]SY&KNTXT@15hpU%n\S2gB^Z1A]c.2,>oEqsl!h>jP]i2^-8&_rPlOl,7$i*:R1m<#gtVK-[&ClXK0UBrD+b"8nh:Wfmc5?WNBij7K%HRS#mkf&0;OHF%kcAD1q\J!$-T$qpF?8(5V:k:?i>$UJor<M.gT>.>W5R-'?8(qRp%R;W@u^`mkk(/P4h[[1WL)8tHZQrA%$HIJ[ooS/$9U?6RIi+Y%,aQKn714_!2_:#iBLd3]DUHqe4E$p!RTuuZj__/QNLnu3N#?$Sfqr:K[Yd-AeBpJKaboaK>9i2#e`mY$Q5D^WDZsVl3F6Mh8*VT3%-Si8jT)d@f^>0\Hhj'UI@nf''X@Dna*[`9V6J#r,!F;`2BM<4^(*GHbjPm>5E>n11e3Q8NY>\+Lh4&3[ip,eRT782IlB_)V76p(J%I![^dhR+j#2Ekde4Lce,Z)JdNb9O/j@>;;bD.JPI;="'/]P^aZ*46jChAKPjoeh)C<VZfZfVC]@.l`Sk7mN7ioSB1(TaKh'Id#;;%YDt0_+g#Y%"pb`>P3L%lC.>Q;o=uU)VU][3.7Q.R9g-_=O0+"AmS,Pale=bR1J.,L\S1C8K"FQppad0SbAe;R!79l"To)Q-b`nH8%&$?X2p+Wq9:"AXF@jq'0Rc9MsT8ZRdG%+Anr*!-eDYh(4e@K^;.d\*H/NH?=Pt6'>#So;`:$AHO&OI'XV\mE.9pYBm+?U]K3fC:t%f,TcHBVoi)?-C,XWNp=bMCE>m;HqD-pq,&rG6$Z<q&ZX',<r8o0?ZNj>E5lB3(\afMit'Xk?R8!*USJ^rCVlM?RoiV)7%KW.%7,+%.>qWOLfWXKZST$Vb)"'_fr<N.r2;g&%b-[4=ap=WJ!O/\?Q)"%1g3V[BA"I>$/0g]HUmZYj1*_'(3D0Z2To`YH1r>;G>iSZlI@\e%acBYQQ6H/E4j.'NU.M*1D4fpTcIfO7Jd73Hfrercp7C@lN?X`qK9jh=K(5F%1c%8;en]POI[6rX=&g^6A*V-;/_)t-NaLtXrU,//%\,>YAIC';,]K/][9mHVM_c2P?8c39+7>Ndp-121V&;mE!k@YFef:D@o9a&(bf'gLdVtFh?M@eE5icJA=DD(8u,D$uV,3=D^8Fr0H%_?IUXY)=L%6%*7Ni_ggd1S:HPe;ABIJ'57+&*)#ZqA5R&gj+RA]p</R/=nFlf:k,80'MbQSOUr?MDV:r>2X=%MM81)Xg_HZ+[)4"%%(j(^HKk)d)6o]m_I@CCT9<&AdPq:L9=7)BdMc^eXjB$@+"XQ(DZH@Y46Z0-qWR,9[<T32.he7MAj>1Dpt<mAj)[fFB-\e&On[9U%13W]1;7im"8Z\52PL=;k+F)Poc"!SK4=\!udJ=o47=U$7Ujo`>5);lUidfI'g+'sqj`IM'=[7B,\Ie>u0+*cn8!!XiQ1M+gUKqP]%(<Y)T2p6FUHdbS4jA#&4+0X^m3$4N9>su\jL<Fp_h@[]De!Ic2*RD^[n&Z:4,!5IA5.OaCgs(1q7b,pQkA(^iX/4^7`)""p9E0Cr%HsLlpU3Q9UrqfN'-Wf-h=/A-k5Drc"*^7mI^5n=[_#I]$J):aZJQ17_SHPP5o;T4a4.&d<H_-dJB,pFsHXA6%F/egD&-LOuPMa&^%.ER"p*G:b7URgZA1g0Ml^7APV\ErT*OD;b_9T_=u@>_J5,'11S^1#<)Dn`*trb6&Wpc:^jEcr#,BniB/0q#$/p'u$I3Ek<U+d=DB%Ig_+^gf8NZW!%)/2HjgsL1'5P"""<j9`,mO::e*8.2Vp\J`mCK@MP7oWZKtAf/T_)O$`"a'$u)hrOk#-nUQU!^[CiFVs+eCj77L;%Dls-O-sD"QpC?r2:ZX__29:*ee[*GOcg&Jh9\dDFdAjLD9J+[TK`LpPi&D?q"Q0pWeD'jCJ*HQqip,1h$<)1?Hq\1db?]k']^BAE%Ds:$r@X.a6:/9Z+%%;Q3,HlS)6"(NEbEnL.EdK\,*5)aAS9cVh?MRd;?)u:5_[Y`u\M*rjNqR5]Sj@_nW#Op=CGrU5mtYi#KdZZg%r<2pK*o79ri:Z,o`trLW5aI=$p`nl,AYNa3.'ij_gN;E]N@M-'5V"Ae3oZR>g?V%uaeTPom)3CuC#dDRpqK^tp[T,p^5kIbWneo@%#(59UbBKi4?tMANc-WI3J"`uMb[iq!l0mHP+P1O"=GE5lmcU(K+#b&\3#Mr.%o;Aeo@"2<0CT;3^Yh<$gHgRBht:T:[r4SfQWZ/n%P8W,>.t4)ZX^IjQg-&--/q;6U^UfkDTo%_DoA0%\[lqujKY\,8*r()MC?o8iW>l6URIN7A!_.<nY@!9ld`L8!GMt@-S#;<BA);UA%o[&2t,[B3ckJus8;p.CHkdUkYo3J4'Bg"j"Y8.'5R6KUn;n*TlV/:J<:RA*7_<<!EKAFF?`j7nE8T2&#g#KEDH/PO_)h50hDWp0t%;uY)[3`PK,N)S&Hh]<Ha6$a)r&[=L?PP]Z?/X"_:kR3o5.h"O$?D5POiVGhgH@g@[ieRQqMP!]$b@n(SK*W$LmqhtXBqeTj`IK:B%/ct9:aTHg2%sRVH=6Bn^okmkjNpf6iSGX':4tGbVTpKRH54[_Y+ReQY2tn&uBV4aJ]a8hRiU22%llb5AC`jhl/rIC7Mi6XjG4Ca1%\4H(hD5eRXs2gkiO+,2ugnGiVMeqj\?2/(3q^$=8m7m3.aPKF\[JP$&Va>/b!;MJ+hq)E/clW\c]?-scTbTZskn\Q^Th2R8X?'6f%bl1l)7F4&>SO+r\*2[TKDY?pUk2Xc-3_8pAZ,$/I&#2Dq\,5]ZNb0NnjKEAQ0h0OPFu9Z=H9N9`J3P[cT&X*D>OkZ`:D^tPF;X9R%9[pBnjMSH6H+\ui+6sD8H^TbhhF#IW>im\(BD^o+4+:\L?tYS_duV9=I:_&NI=Ol;dl_]pL8r\aZmQU$^J^D7Z]fk%hEN39H;Mab%l=UMp#!QO&["ES?C@Uu0eB-M.ZM".GL$)n/LE:MnDtgLi'`@%XV>GB)]sCed?OQupq<iKR63pXL<Sc!pSgt>Nm\65(KDUPo5$Uk"%?""ACF?9+I\BhLVM6BeSoI'6<DS)0AHo_*R"T$GcIQ)KJYlk]sStg]oh*WDoN8VE4i3g53*PYkp,5GQdf?=MJ,$`@DCI*W^`!aK-%;]2k,m6.9uZ`V:-l0PKVr-YGU&2R=E_3N/TWhI,lh"C1c-W,e&BpPl#DXXp6dGeHc(Lbg?N>@tJ-f>03_Ybk_FI"H4`TGS\\>g'[%mDn-p^0@"R!"lpu(>.kX51oXa'g.9BOiGdtZ8XhS7rZFqq9J=`-K35`'/:/RGfqL:RMS2?%nU/=.pB3o9K0qU*mrq?$*\njg6p@c%@P[]#1Db+>M(;.b$PX&tl!b*.5`rfGL9,onqu,"lmKC'g*oWU3m(ci+ja+V.#Jkg?!-gi(('!nR*X8GsotD[m.PE[Oa08E'3dWm)%`!j+$DgJC3ZMuP!d17d3Mf^*S!;TB>r,Up_Hi5QRCPB8Z(nt]sHiC!!H,//DLU3H<4Sbbp?U(k]gp'@u7*Z;coh.A.#i>fI'_LP.%B<8=uc?u]ioQ<pd1?5Rm6V.>XIqX>H'H2t@GTpI5@tND"o7rt1oPB?Y#QK,s+22N1pfBW)T*%.QL=XfMWdQ#H3cf,Sb9f)]EC?UG%&8Ai89;feIHM2O=R&)i8mtaMB(UJ+jpfUc?W*TO?S!'oDjEHDYeKDjdEKJrtF"tTMs$!5'o>>r@N5pt*IiVgl,I>K@qVh9+^M&jM%d1=9q7<.e!SU8!(4i[t3iZY[M?2V@l:In*u8HqaXqJ1D85iri9f(1VF*:M6)Fu4pMfnV`#5eK?=MKK_Sj(nG4,uUkCOJ-#)E6*8!%j6u,!Tc$I0&FYXm<;/LQbM4k:CH,uDj=+FEUJ8,Y^GVN1#&!$a<8]3\)-V..@m3:WIp8;n3!t'La(k<#5o`D+RHf1*aBUn*"gf%)%I[\j"dEcU%\UXBoIf(+4,jb$fYJ6@9>o`WiR%<EPmlNbs]6@mr7-.bt+Yh>^d<GER6YI>ndSPi/5(VqW1;SdibG$RQ6%b"6,(R@4%7)ofjdJj.5,=\QubM3ORLP==*YD>029F.N\j!P1>L>Xj3s61PO8oT*MA,g&3O3rQGMkrZeNtdnmD:u8i0Ef$&G)D!d5@Nbi<*$62%^(5e5Hm.'Sk:7KDk4].T<;o-L@E4!)\D,,)DE?\=m`0X3QMq.T^&VT3^H?ns6UPrB)Qp9/7B\VB?]9EGg`6Qjo<6,\O:Q$]cdTM$%a.dMPX^>aBY82gW.81q>ZekU[p+om"D=@/emR%qO#XE-bR,D203%24A;k88b5MQ%jR7bt<DeE,CQi"n?8`J\kp\C"9b]c5ecc(t@%f-$V8H5k!;4"`01.;pSeL-5(@=2^/*Bt,$+rU>YQILmb8+^F@b5JNX/(I&*9:HDWLPqun7.O=J#E/]%&hP-AT-A-@4UY`+ZCV>VX%+H+995]5>4.!2?o.Cb]8j+[3T1]J,!T=_[^rlhYA_cbB.=:M5oTc^j/F;X"o/0ADp@&hE:&)1dZMm(aG6K%2.)6W*L<^l-Hhg>P]%;icjT1j\$)QCc,mk`R9"d0ou^#M-BP9e;jJq%9sBj[gP643;p@Hg5m=c5<6l>p_WM:."#:X.8p*X2@W/`t@O@MccG9'oT8I3Y[lj%OSlC++01g9lKA8]gF<!bA],/A678/lKG0IKM*;':$_tSP4PqugWk".<K2`p9]&u@Ab\q)PSN[ChgGg8l<[6u1nr%8mQao4c=d,9^%E+4P6Oq]FUG=qEUfW<W0s3+bHY&r99V)\Jl?L.C5Cotl277+aJ]9g!4BuR;SoA(e;LgI_&[A$($=#"*K/O#`1MEWMZjI22p#]gH:%/ACXALC&[X/-",31-C6bpJfK!r@YJBT3QPY)&XWDnK\UEa=L:2-l"t1j&j\Vo):s(0V55[=/6p3_BjUGduP4s\hBpf^NU&l6t*52%aaPlBKo%MQ!^<9W_,N?QIEo5B*j6kepnSH(M,$Go`YlX&PM+-']9T<=i;+T=D"o3A@SXNVe1'sk525)a6gqJYr]2C0;t>Y\I.3'+%k[X%=^M'B^b&OL0JOGHQ3M3ssB5UB*cbT-RMP"-#:<qKhC3Tt!X7P(7rbS1iAE3L4KBDo-lh25[;<9NYU;R6[dB+:;#4i(X:KEY`%:^[n^=:HC(mQps>AW!'eCS:7)WXVLOq\r1i>[AABb54O64HTc12jPTNdhj9H*/R`=]BSB-1kpuS0*H142'heK*+m@2C9O"?h;pmF%oF+f]bOpq&!RjX/L>9DB7F'6MQ\!'1D![;-JkX<Pk5<o2M@NWsTgO,eMLP:QcuX:(Zok>f<HIW9P$u*lOBTlh>O)%rKi*t-d!F)a%>+RRmRNls(nnW[KP^Q#:1#6QH=&IAF+r*]kQRn5Uf4U+C(WgfFR!q/6@%bk8$bdR1Jg@4sA>^r5WE6FdAHicVP('Pg88s`YJ9n]Z%BaGH=+@1%n2ZlUD;fW*-Zo5\(_@mALLg$q_'Eq$8&G=f6I:n/=-98BFqqr9%Er,%G5/(tp$tAabYE5[6KF5j<Z:B.Fh+#mG0'$5(%)KtqBj0bO1B6VZF;lb-E]AGB3oL[keX52=eK@LO*;b.[G\bbEo]R&;f?h<i>@52:gAmF1WGu+o>b2q.oWisD<L[(85Gbn^onr(0+%YZ>kWr:+P><(CBJL:/nEKU!uuq-3>0Zl!tp;sZ4S_i?l1TtobI6E=ADX^0Q)*p1Je0C3N<lo]'-?0`_n@9Xh.6+(Jo./LBK!d,r!%1[']/dlp^U?)M$lZE4:XpUO0:Z)#SriqZ@lo%i$S6*>QTL:D5FMgQ=/-X=9R5JWOG#HPe"@\<EAr,$)<#(7IM/2fibTA3N+GurRe%j0l"ZFR&.jX-(L=SI4l.8?e:XHA.o3o#]M0L4j7O.q8^UJ+IZ/dXKFY%5UkamRI\-I$Eq<J!E;@-@50Vi$/2W(J3+3TK\.=]X/HR%:2TL!W.Zu_7d=`lhGUk'fYkIU@fF":=_Jh%Wp$Y6I3dqFeO%=j\sNF8]drr^(iTE5qmV+1Ll?_ZAaMdTkRP;d>j;!3YL);-na,r3%6Vh4>M>B`S8>`rTb?k[L5#ceoDp!@JN6Vr`1$D^MZ^]5=PeO%`FXDqIO5oT"h=bJr%o7Y]QZnt!3<lOJEo"4biqo5F75Kh43?YXo%ra_,Eb,=&7q$:[#+i-jb?2[2_s4igmU4*Xg8*F&;*36N=6?@Y?Ke=OFc$u$CW=T4BU+f[]'&5SG`ofTAY/!$[5%<k,<m/`MZhG3"%Vg9,?9ZN!oq_tObW\q)P59O'DG9_'79"M[XBj>3E$m-UH&o?ah.^,O4Ygti>1YFnBH+j,@QXS4D;$"^8n)rtCL"^>91&L!l.RqN-%+1d^Ja,#A5JKHA=]^+qBV)=AF"-Rr*m/E'lcU<%]pjM7&=3j)kF?XVeE-rE:6O_D40O27qj=c6To^6K`l?E41mk6Di,3B,i_nS;F%MoT<`kpP[kN$jc<.WO)dFs6epM;Q!F%+dAh?AV7-T;J["X1QS-bM6QZM^8*;/NSjrE]([G#Ku!sQ[JL^$O=ml12-DhgNt_u%GQSa%jJe:r!$t<jgar>d5PUDdWB[T=-?F:s4"Zt6hVK;pdGrr;KJnL8UOu_4*GdM"fq7TG*ktYOJ62*a0<eP?N%%G44?9REp)2Plo84[F%4kbV_VmF(fi$I+rqo]Cl=tCJYOlqS;_SAD-mH;?-q_Es<,e>Y-e!)gKE.b1"&/>*3knN`nLQ/*c+Z`2(gdrDo[)kgtDRT_DFWm.`%oSFLq%`$LD@.>qp^$V4n-?JY%1Y'J$*jGtnMY<6/<Tdp]Vu)\Q]Y)iVH[?NSd%uf].Ppk&jh;LSO6P`dh+s9]ZDHXm>B)LojVQZp%Z@c45W=Ul@p1@p#Ja!u]dNmMie8k<>lp02<Pe4F-\#trj%8V#s^4L%h`Lp>Z%cZ=Qg#+X``+i;o@`M"4d5Vs8Ht:9i@%3u#5Jr2&%o??UPlnWqd(b[*`IjPeh2"cW%kkR5ee6hQ5hR491bh)9qTC3cVm:84p:aQI6[B.Q4lq[?k0sC=YTHYuRhq8Xp)36SKB&cg<8R,S2%f#iYdm7_f/F\V4a"L>i`]e>A]2gR7E]CIJllt'YpcQul3hBMof?5uO:.S.<eXE7+nr;0)d-9cO5mq*'PnE<$V:L_'^5LAFL0N[<]%*t/*ZN&BpA^UIRh&of$YmMbBo=pm&A&3^5="TA)QOiHb(<N>"eqYb!*=@Q3P8U(Z?BDu?'bZg&"nR+f3@JH7I4sm&?.<PpBTU8qK%X,n>;Z\)\5#I,bVHcklIOf9rcT(_a289U)o#"rHZ-dS+nk.u6T@&N7($l>9#j,e)e8.^eR/FO['_':/uhUD-SqEobq^9`a-c<>fO%V-k4,mA"WIpHeS!70b+0C,c:!0*k@RCR&pg#0"oLnfIi+F46:7OkBP+2YP?G1:>@$:k&<PI"b%"GFjf5HP=qG-,q0=1Z/#Br'AMC%i4BN%r0d&>/!\i'flE+$c>e4*0*nM^lF#T5I-U,=Q2KakQpDN;Z]k@!WOB,2bNis%a0Ob22Wt#j[$)k)FS4:uI&'V1!6-jW^$V_5%iCjId=p*M9[)S-Fb7iP+45'4os,.`X,TB="J_s8BGXAL+s7aHs&;7PtL^ON5jDH^99Q-j-?@V#G\l,\%k(7158*t;9g?I*Js-`&j%Xi7M#R_+dO8>_hC%m6R`X`:t*\pJQhN`K5()-$R$BT8pef'[1"pajf&aVft3c+m?.L\AD?>;E[Z1e),1L[SjKo=C+,"@qf_lBH].%o"49X+eLiGI?XDJ@LW3$14qA2.faVFbQK:PQg$#?Fs<Fu4bemTkL]l_T;Jg<9`DS)Y8**Sa"9)lA32X1iZueH8lu5\fA6WNCIYT5%mQ?K2cfskGm3Zo"J)4"iTW`h,f_Yd3;Y]_)@'g$IQk*Y0^4.doplihCNJ8O*2Mj*B(Zt:ff$hfA.Z&#YW[4&Bp3J+]N/9aj2Y<($%='%lsWQkNOLA>/+'.G*P?l0#ZR'Pcb6i7AL&r>9:3oJ`s,^7!VM'@QV@d3LI$m@ecPCLIs(JLN/3lP?)4=&JbI#kKG(AeNROch,s%nWM^4p;p7(O4:W!'cW"n";P<1C.GmD\IZEnM]X=7L:-?8?91,.)k>Ccc1*e,24hk?qR:XH804L9^)!o%&T9^IL%d=:NlfGL9,X$:%T#52ZYJ+PM;_?l[9/%9J=k-1OEd<l#NQN[n0^;Ct?;E1-n9SLF%+qJmg:!^DT]g1)L(t=;0':@'&WQT)">Sh0L<&662Q-^V+R6J,%e6[=Fag10imA(qo]t2gi7^bWM^clc)f(,]7-c?QO5M2Y>OC,q2j&c<U7NV>cHR'f\K'@!ajd3g,9_0(>k8jB%7q!sQCDYLsoq"nO%hEqqFMAtVnM6C==3mcl??GLcT<%V#d'C\.:Fn3M"IjH%`W6Ag-5bh6\bLm22)%Ia<MnY+I4(WK9-(iR]q?$7EB_T?a/k["gVLjhi%/@'Lan3aPK*eo/(4tl8V^)g"]c7WZGj>F%1EdN][#$='PYNGF4GAuP'f62ER]D5dkW^5FoJAkRMT;+a=jD>^8558XgalUcJSgSr*%4:GkPI!6f_?bj$Gi?*i/0Yb+24'76b8MI>da0.G4j'nn9COr\BNBmie*c([+b</7sX$9IoQH*Ak[`DK+SndWepDgs3E('9m`oZ<1%3d&$$X.h@Yh_-$Nks<A_Ig<93E:5JZDKSSP<u'?Z;MC:C'As&q74hlL5<E=o^k"\Pe<"#`/+N;mT3KK16!L.SG2l0iPPa!,L,iG]%<)F"9aB4g=,J1:W^jTri3[NY:55^E$@0U%NMBu<oV0fs,BWjDhm$e3O+k5IU,%8jL)95qE<dm`rhe3lhEE08pjZA*mRWJY:m")ZL%Bp6qq'ZQJn2ta@0S$`&&H^Y$Q$,j`ST2*5A+u`JKeumIlr1QTVV#TCO.@N,[OkN(5gIpoMSuk';<G(;n>pbJP4AT^"_uE&!e7:Mg%WI<Wsa0m]Z`ctl?8q-Nba:D/lnT"XOYXd.k2rFB)O)AEu:upO8I*qPW]tA<[\>Gn8&!rmGn)P753!E+N[O6=uFRD0eh4:9g\UMH-%'_'["r[k%,iG)i8-PfVeqXn0-WUA]G=%rA:Y8V\Ebr3>&qB7!^,SP0@M@6*A,dZ_IG%m&P(Aj]?_.^T85[n)ZIdW".n7d!Agillk%mj7pai?>ccf\%e,W[<]8@(FRW!HLX7lYsE$;nZ.DL>*_"<Y8OqHE(V@0K"8<PFT=m=V$ZS:=?H&RVuPr),Bn+aaW0D4q7[d:1OCk%E</2@-2-"V5CS)iQGp\-2h+k(2`%4-cPRZZI[>]u7ZVr%9Y>dsTDn6O7WQM%rmNu'_RB?XA,p/@EMiH>G?FY$-S=-&,)2ZG6Qd-&%Ol='+ELKMDPk#'AjCPsQ9=rRC[[TbON:<'u_`I]Z/[+m^4?J#Yk0a[IqpR.lh]"`NcIQT]kK\H^IPnaooMPOu:\8F@#bL&j+=eZA%-l#4=bhtCtO`8]iZ;DNO^HSi.Zi/,6B;&J-.m/OP_"RPKJqV:;;%\/V+jnQl!nX_5nSZ\5T+XYTr!,4OpVGgt;@(jb&Ii8I:_0,S%?cfbb]3M[OjthF-SdWGD.ETh7g>+$;Qd_^7^L*JB]U70p3/soRV+?Q7(&deS%NcN&O,@f*aNtUR5T<.8T'pnN6+B:aoL&#?;(N!<%%Z-Z,.R3T6cbm7:.Z%IH\GIJ5q0/jCa_bjk+;*cTF_S&MY.17_S%4X^G6*_0+1:oK+Y\iB.jW?qF"6S@,M(T#b$oOc;t4q-F]l!B%S9gjt&X3,N4J'*%B(%b!>eC9YZD#mq[;OACru+oF<`S0`BmmqZk;taQVe<Fg^":en[.T2a$:hQ/LR!%+iXsA!b.CH8Oc<U-\^m>?%T514':<s";E0u,%>(-=?OY?k$LI_9riQ)f1]d(9&GE?d,s!F=GMXT/*F?fH8lJ9k%20.5Y4Ie0OQ)WZP]]<kHgjUJn.Cig0</*3J%maP^lhKoZWF5Eh1k$8]!pD5X&g*67^%Lh/6#c6ipX/['Q">4G]`QS_U617>;*PI`,#]Y9SM7%JllW"oUaa2^C_0-b-XliAtD/V,:%YsTHm4>no2!tV.a);j'ca4E&*f7P<iCM.-A2N8MWA*<3qi:@!KRZssCg1nqPYqKa(/m#a=5d"A:O)8jF\p":+/+*6ZT^]cE:6ZS@%[$E:);4b([1Gb,'0=O/eU;S0goDNBS8s\WSrdM3s/U=n/j(o(un8-4/rS=r,(83*GL:dKZ8TFU/cMkGPD\nEj`mZtoGFA8MRGDp?%h_+Qh;gNY)inFVi1A:-.qLTYn50L")m/CaTWbLkQ7,`^(XTq:EUcLCT8C!"Uc-!<5GZ)f;ZF[g@VmUjr*Ybeh%;8s(:0>JY`%WU6%r&T>,(TUuVRp[#ZA34GJ26UfLi88<TbL#+Z*6@ZRaflWonHr;\l`XhNf#*+;ngQ#@m_.XSp";.IEhCt@8m[*cng5/ua%CE$SAq%e%,!a9rDP&1^itMM"A'RXI2GOi,72sr.$.q4+JBLTJ,Ts=*M?"X@mZ\u)itMOP:ZIff@,hq%Lr),!$.q4+!'4W88HLeF&Kpm/g*[3Z%3(3g\XrNW."?&sdJA$,rOp#Tk+oqNu*KpU/2GFb`;*'_/!]EdcJC`_E,QJ.d%Y=J:f`=@p?S+(MC6Oh!!(rdWEb^+V-3fQ@ZcuAM%Cb[YpRU9YU2*bPrM#e`OQ'<3&jD!/_3L1(&Ga;VddJJJigU)4hoCih*\OY2D%.duT!pG?po[3?2r'frH60EP`>fq^n2>FMU3kQ):%gJ0nT?$L76HWZPlp1bj9FQhNo8?SIij]Od.oQSITMVH()U,9n$k"mok/GjTR/i%hH[@`;b\XoT5W4_P-M[%s/@ah80`P[>m68a,*%6h#pRJffJc(tc$U_6-N\i!2G@K"Lb;QOgb4['l3Bn$3Ll(%u]UYL-a43E[WsiGs3D?Sm"<>6VAY@taj>6F%gXQg_-j7Ve8K.>/D9%KN.i#$Vij(I"(_d<.@WQdMIb?^=iOc/#JDuP2pdn2MIf^$R,h!_-9))?S;ibG5[\cqt[5B,6Ib#J;Z"7m1YTVlQtF;4<5OiW:&#n%_r><C*(>J6c<%H(Q(CS45WNd)*p?,HrAn[T$R8+ee1:C,_E5]`2o-j/SK)AsRd?Yi`5J-HVf7bb3H"<\1ETrIT$Ze%>KB#__+^u8%ho?e2q<l(E[-5-EW%>kq3a%7]$CYh''&N0t>8q*G`a^f1]+_3`]Y@a7p/a/&8H.UVEE#<ma8bnPPsWOTJn7.RUUJa?biSMlQ>1'H%Qp?H%8%-n4O%PC]3`?j\-N>d`+8@W8\lhdIF7D6d9,q,.9pZCbFgHO@C#ni66o*5:^>GCRa.pZH+*S?dSut`\(O:5Q:&9=3^+$N%%6,S)ChWQ=O33[fR#X;RQ4+mN\qR:6krpLX$gN,(^#cRP@oTr5C+5a$]hsQm/gAUT^\D-MlSL_^8\Mt[Ra5VJ+RRkBP6WZAc(3s5*%a2D)IjZ(gSE:IBs-:C9i;k/c>V?@]1LeJdG-,abS@2%@$keCS]Z%R?]*fk=+N9J0(Qk>"=XpL(&BB*ZM4tJ$?Nm&njCfK/IkJBo_%kB0L83%cIEr*c+VMl6s\(`.EogM:NV"'=)#nmR7Vp]U\H&-lHrM(g<7)YcrXQ:Za4*rW">/KP\S.*@mQjhXQ&#5$eM6!8eiB0^6.%5a)`eo*ih&dEi@kA$!+5'Z+*+RS^aM/Ir%AY]0kUS3rqlUrGDO!?4[b@u2$u=qZePAn,LU`&LE`0$9k$)N0>q!V^$L*[]n7*;Y[]%lU8dZN$!r[A5O\t8%GSP2F),9E&92'(trYf`GGmqBM>#)Yo#AW((WnQ"B%p$_BLLf\1I`R^e1Bc"1Tk$(;VYEprc&>*?>oda#K7o%E(`<N:(Dk-c@sYq7IcfXi-5b@/'$9B9StA>/J/?uBV$C(5(QA2(^qaRi8#s-Ka!SbkXKb2!Po-,$4(0@`2FMs[p3UEV59ph*9.Y<%FKNs$JocG\3*&;+Ep-7PE+fCbXUmdP5)XIFUi@TM/g9_?1dn,&!f2ABZnWaC**T(V31pOL/tRm9$FqS=Du^R*&pSuS,`#tUdA/I)%'V0_5'kf!:6bjlg)&PpN,?0O#!EtG(;an!c//q*G$Vipt,91MaM_GP%/V-/#&anSXW3iT32U"R!$&g4D>TTFt:'A3u$+aS.Jk&4:%OO)o`J;?_2o&u%;/34,#3l<\^XJd)X/h<SN#(7>[b_GODc]cZX7RWkgN-(-.i+Q)q[MU,%&JVTS(8$4-X;=V>C-tK1T2?*7-VDlV%`+VL''fcjY%luTS_/;48k[";K&Ag.+NS_NbKnWrF4??"Q)O+g-E+,IX.\7Gd\:r]E1`nb64M\bJ9#Wd(4%pW:a59<SEgoH6l!Lr%%65613T8<[nh0:jDkeJ5l>T>de*&$gB:*e1P)re<)!;e7T5tamB7.i-OOV=N+]_Bd-.#Bc]4;LB!&@>n5)MpnML6d&mT33>W$2?$X%gfU):@l+aPq]lG@BG*//XoT&,5*O^I'"PM/["*'1Me49!F-nAmTjm,eR!=4La9&(R!&PnOjG"!rJ[FnJP9?2_N/Q,.>SJD^$o;k:%96e!eNf+k2Pk";8"Dt6!:/)[r*ZZ$PV[T:pL=+A7"?$SR-'Jdja+STuEGoqkV"MdU#\5Hr6nCg]G_U$>K%9m,jPdL8/a,5BA1Z[A%MqWEIO(2GSf*>LK`bAW'Op1CUD<&c^/N]-\(YjMM0:'23g<+\cKTb<UWni8Ei70kj#-#a7[KV%BYuX8)7\3NhQE+'RSNDTD<Xa9)%;/Ropm]I\+ki!;%<pk/[>n=Eb@=lsC:W-G:.U=e$$](SB34([VY'8B%%]2<gf?Cc1+(*\;m+C4o%H8J6Dm31cR7q.+^k$#?2.3u2%]U5d6[%)82!Lgb7'1s"MrD\J:97E[rki_HhK&jOQp&"V(85-(/p>eEHON6+De:)..I#mp4]#PSQ4eU/^()+YUXAZ5"@$mC-qnu:S%0Y9]Tq&9HF&ofu8JQ0R7]+!*_LLInnT9?CBC`BQ&*FsY;6YB/0TJQ'"eNNQOH/^+f\Q^=GQ7h6kf.fCm87fS_ejHKgai;1kPSq20%6!S4=.Nfgpd:S'8![;A(@P8#R<TBmU=Jl@;ST;)cJtrp^1K]AS72-o%c\h/ZTAF,<il)PFT1YdUb?M[17]_DCQ>qRf%.:O5p]:P$%l(Bd"-:icI#=^egf-b'bV^\J*CX$]V$<c8B*SM\Q"TH*i(p%'pf=TrXC.fNnmVm>4RT;HmXQi-jbKJ(sSur:RBYf?@-Mld(-^'oL%[$)2[\."c&o3P:?p#(0`mft;WBJ<G*N3u*N!(1QR-EgXgOA@p<.bbG/?833RW6(s8H?V)7,+ro,)$H^8'2U]N5uri+l&fU1S0O.k%Lg1.28/Pu>?6\6s8?T3X?@pWI[2$G2ns*PLh5du2-^[Fn"AesoNI_CqrSe'S8f9b_N:inNT9U0[d4?/KEaq\"L!'gQ)[2O3k)&:%%5iL)td$sqV$De[ZKO'g1(d!N`68s^pXJB7=,,Dl(70t.J9ULmb]'Fq`+09De!uspn49c[+PUn(6#CKcC/VtYu[05J4N1DfV6`"H9%J=0s0:_>Gb,Z0+\S:XGVN?h[;i"P@'!kZ:#A:J(-+fY#!7I5&ZM<3C?D9c6Tg9D+#:?C\.F=?,^'14Pc75WN'B1#chat26mhpLp^%JiIQt\8t]3eV@s4AG@iQ%Q^_),b5dpk\B69C9?P90STQ?77GL0iXe<D3#EK?O+cU;Efk$%7(MWtEH#=&68G0+(,q%l97#/%pYbKq%m2FD=A4dJidO)Q'7#NG'2AdO%,#RcE;+4+lKL-k"R2/PS(e.C.#XkaS^F)<Wf5n!\E\\4aG+Mr+i^66A@]@0ilNG"I)Ehfbci?-T%,$:!47?`YIf$@kh#tcCX6Yp'_G(KEW5M$k-"cV0^jiqV-2@l3f''_W,[:")cF\2ACN1ruh^q-?b#EiJi+?bO%JB7aJ"VHA(#dHo$%Tgs5B"qM<kk9+1nI.pr4!i:t]d#qfrRlj09;8ag*4K3rV=<=3PE'4Abes0X)^,\UZM$-k,DdtPX0(^,.APt<PbaIX^<K]50jBHbH%%:MIt@*Dh7G,*W2M$F1b[q&a2<U6oZFmVKCA5*Cd3=Z`[3<UJfVW$<0&Ha@DGZ#(lUC)Zcbg\I?G/CL,2$B`kqaCYV_6`2jo.J)>%GmG&'<Z3?kJeZ0&k,GLnkb2M02*bW*Mu"lL&PK"[99V+X\lBk_1/a!`mm6'Wf\salgp"a9<f&aI(LDpIfJUgR8-OE>M[a,j[1^de%-%<,Y+%H6;W[&XlXi?rhI@!A5Y!P7En.:_"C]d`G5:[M/a;A3RE^F.?ZPPID`GB-$d>*SIKC]a4+:LsUfn9ses2jQ)Kehjc*"+QW%\Wd1q/]9jgK].NA)XO\dMAmOXS!o?D[HW$$1(ho"6tO\P&F**G>4<,O&)1DJ2'Ii93D\<X<Nqp#SmV3QZ"!rq(;u+ToI$j/)J#+U%A;IZCJ:c"\V01lG.767,S=:gb7'uNBTkdTaQr5[Y=3Xj($+(pf?87Q#+Bu^Y;Pi'2pS(L2e2]MM!J&DBAP9rm!6[`(^T7qY6:4^(%bn5Z'ck)2aeF:`nIXBq(&J2n#dd]a?Zc9A(NQL"phMHW<$HWSbNFH&o`KfOe1h*%NQ@h"lM/$$::6YDbes4dJG$2@l++i=r:Ke7_%LG\5EjMDT`.o/mGo`GgX5RHae7"@cp"pNYX(.^aSGbVNXd$&h-j1EV3P6f"^hWF\WrqQK]s/+0W-_2mo8kG%$_JLq09#rjZUl`S_%=Fs'0=E4cXIKe/2J-Znn].$rZM1e4.=\@U3br@;")W$sL/Je!khC8bqK-gZ/qP5\$0Y_h]#FP:aERY4aBW3'G_:W@D\,'JB)K%5$%J[C;TVkZGZ]41&H2@hh_hZ$aXqklCKmS)=)]:`:T#=*@!_`kj6Mam!h^PS&uG;2"0V1q54jmW6IfC/b;*CAQU:]L:UO+R>f)q&X;%Gfp()Nb0K*(SMHja0ZU/[P<Y2A0S,ua&/6qIX-.lbD69_//n5^B,q^&*`"0D.Ncmhb'Wfu6jP:0Q%Y?p0fdQ20[o7rK6&EZFmm22%"kZj??EhZ?R`jltbjXT7EPt!/H91*-r:="(LNIOU3$JCYPn,4,--4(G\h[nDjs?VI<H<CVK//e+&`g/H[.nqSltkrX".JA6WCQT*%4'4su"8!lSh'B'sN*[f>H]Za%kkA[UPZj6aB6.^KggdS('rRReGUoZgS<<&hNtip_O=3DJ]aTriSc.U9_BP2P-sA<k-%G,fWnrjr%(+,R_U5A^f^_4sl=fX4N*Z#c:d1gcG#^<[/OK4B&eq</sbkbN'o6Hsu(P8^5,(VkpNVL@EBa,-sKje4g&RmFT\JiI5l.Hdo&M.[6%[6l.dlT?,I;*Gkb_#bD.Yg*e5NR87,?lVYqigu$>RXedIJ97SBJW-O)kC1Rq[X>@#UmS5\kH6=gKJldI$L0LF+6:79dKl5lH)_u4%0Wc>AL]Vpi<NljpRXc5o$7Smu*".`.AR2B43Ij_t^3(RG\]SRIKPsBR62'gH%(sjhY9A!]:ZiO^0Y8ITQ@NiBi`"@j?^M\I_WSLf%o`qr__[7*a!a5`-^"okaUg+bjGjJSmS2>hF1UA]_=geW:9(9,i:!+-eD,b8k/[-6!CqA$kQ\-]]e/[4lWX#:k9Teu,&=EoM(lZmO%C8h=J7KG+/C*Ueo"0@nE\J9[J&><LpV$rk,,l#5EP7t'OR-C+WVE$NMk_Oa["IT#0*:ji\=ZkO\2DkGp]b0cf6rYBrZ=A!4-7=H[%>Ydf<qPmbBA$*--HaNdpmX'OUbM@?GTe&i`ee#qR,+PR'og&\BRsjjf2;.aG6cKZ.Eh9M;Eg+P8ji#9&0Tt*TI"VL>:`7N.!\sgZ%(m'l4T!H_u$Ya@92?#?>i<%SgRKAYVn;W7\h9[@;a^10*kp&3p`0<tmZQBA[,:Yd[Uk:r)3g,`Z;gjY>9Y`q*0@"J()4'roJ1sEK%M:2ZKCcb?PqT"I+<I3`VjsRS1l")eTaaa\oQIO@l-#CY/NKj"MTIH)h%XC8Q/nlP$K!SM=Y\4d.Ngrs%mP4TH3`28iU'](E/R>gc%!&>f\4u<_j(e,(E(<FqSOUm$G.Wug/WA2[!`Bjma8C^DPj3;"OOc8>RZJns`Z7h9.I3C1s)T9(@?^Uh+.B53W?'ne=LPUk0[4GEV%5W*D%$SfG#B@j67YYm5GB;T*4jNQ++;hU69@=i;?&#P1c)g5"#&;\AS19n[D-'61WiD?'t=WG9)cjs9X^r7kR,u`0$Yt)/W?m2!5%$Y^%LP`WD,0-XfT4fDO,L[^,Ye(de40b35!,j8'5?\?7n/1BYM)SI-10dI$R6c0n_a7?G\WXHm_E6A^.H;U79jX<KUObV<.IG`C7%*'T(`Se6V"`NaufVe\Tnn2_V[4-E]ulh9!&E,IfONl\I#r`%L>f_$[Q:.1V1cQ\lL/YT/YW-q,0AW2"HLipbW\s'AiT#NQ3DJN(.%,fo("U/SqV]arCi_Y*\_h.puq"*('TLpW8PIj*AN?2)^R0]JWj^J.XZFFlQ;Kci!;^,AI\P^%_Cj.S%71"k/8`5VlF/W_qdL.=M_%"%_]iRZFXGIDqXK:pB_Fpn[,J$E`E#/>.nfNZsVi>'/[6R8IRdi@qTE8S0CuFWOc+bm<,E0-jq-^-3&R&hmlk1^tDFC96rk6-)`U%%;$Z:N>L@3Ste92)&jZbgc/)0XkWppKh!<3D,T?5b2Oe:b31f=Ah-\TKkqKa1c=pD^1h'j,0*Yc<6]*_1B,K?o!9CO1;JDD&+3%a%:#cYf,GaXAXKZ/=SDqW-5:)pCIEW?:3^hI@p6E;DR'=]KVmK)?>DiiN?K70#a&cg3Nq61DQHE?0iQI]kUPnt/H;%;>70]9nUT-I,%qD8uYd-C?Ffft0)GYk#,cgHn%4LE#3)Kd0lRSYbjLoMkmVR:eRA_jj&S$4SBee?+M!c-q+J]K&hjM<]0gZG(o?kh='[LNlS)J6JQ%2C9NLpJ\*7Lg5$4RO32!?eOJA\R<E?3%g-F8$#fF/rO%d_Q$H>)G>J?W3mFa9<=[nXhsSmEPC'K<`?Xm7YE[dYLf\Pj]GSr.j6rb%5D&5u$EA4PalhTV%482-j617TG`]<-Z,;Nl@\h4k3lJFBa$>=#A2ebf:e`CXFq$nA)$%lZ=0qRkd:TGGFXUpY8e-JQkff0M$:Ku;%$11iH:R(]2g(f+1#=8Lfia'[lR6>6u8q#nFoe$s+iQXP!';"GLAX$"o:%B.l^e!1FX:4\fRuQ,81qmOBBaH:r9IMS!K_$7c_M)be%I.`+T(ul>dh]&u+Vo,dM_F)X"FcI5Kgh8TefbGZK[@)_J]/#lOKOlha;C?'3QWXpgVH.Ou<7&>uSQ.\kYpou_<e]qtoSLbkYXH^j%gT`4A@9f5GWlQaA))$%c;3]/l1+HB[$h!1,0o*YkKc65/*2DLJ2(BYEUB772bGMr=n$4A[7GsED8]bAu..qo&&pCDD`L2rNb_9nt%Jg8I).TBn$gVZS(=d5=+1N=In.+MpB;$PId[UmXVTLl/.K/1$7!4G0Ra>#(J>6[N],WgV[<N7o^#%\"nZ>EEMr:Z$E\.WnSH@(7\%GH]CYeTB[&S4k1/EFR4`+RmNTE069dcgr@;0;iq3PDh\8[YGo6P%1a*J/_[Z1![sRiFPN5[@i8ZZLBlsWNKD,"Yui&LSV#p_IoS>%U*S2NL$JhE;m7gc6Zs7E?n2TqA-VmCbJIbsCfibjG^Q[GIW9j2IH3S19I:9bm#pkR@^-V,.5?r%>S>m:3sgCFUg-1-ZoE[%Fj*/<%Y"Qr&\F[*Rs%l-oPBqBn*t[hA4$!'U]+*kfPE;!Ie33MQfZ0Rq-L[\76tUR1&=?iub%Cs(Bnh10_\b"\b%/LZ'u<dD@eo)Ka?Dj$%TOo)=f:.4lD!Vi]XChs(pCb%p/0D#j@26WVBLYY65n;.`QrRdM%/*mJ\3NPP:/rgC@NN$ArEQBpN<mXOAt4r>4Jq)`W!LZa&#.7j%';XPKKs&Fi7Ot3M'O020;!Va3ZHO.C=cA-)8S5t$Bh"VLr(Q.B2$d\)(@NE?(=\2^m%D64B#0qRqDp5Ce3Z;I*NgcCEY+1jH>iBc%+oPrQP6ELR9MamIOO'?pbHuslNN!816>%s>Qu%93Bl,+Icf21-2,,2<=l,'&2J+)J<B:D_M5jo$r[A8E[)OL53k/Re'3Zt<\dVmk%gIXQ.9^DgH'T3Cd(Lf9A)Ztnu5,kdl;V7Xsn?K#.Jet^u'DmV'0uN.NiUV9)FDG>i#i65'cg?$NGj)MJLcXr8ZZLG1A&_(qY8s$K%W-4K8"O'c_GRk71<=PLV$0!0><4$97\h,GkRO]9oqaE]"'jclN,=#Te&LD>GOE;X%lN.QNBMA=MO\sWQ6o:A&HR$HB5i]Oi`Zu?V%PITnpITiZjqCN[BZne`O.>GQ80VMb!'L(7p(0J+blCf<_d*>S?oErSq5XA#N4j_n1"W%-:8P`h]\Y,QQW>/l2)+Z;Gos"ieJA=Jo%fLLK4KD$AX+H+iUb_jZ2i&fkc35q;k6a1+k^LRZJ.F^#QXD3*kJA+1KK6lN@"hPkcAd"q#l6/,47-tX&5iZKhL-JU'$[WsmTaJ"8%W)EnYZIPWm17M"?#e'pULO)_%\.:t7Ahg-UaW77h*"qs2D+olfKA2m!8h"A6C@^Icm-Ssbp<Z]B89BS2K#6]JW?fY%"#K[21hB",%%;SVZ08.?jhHSVRI3U:^n9[!&9@"YddCgn[Vk$Ua9$oD?AlEP]n#kfAd<h4C).bCp")A)iX[*I.H]V8Ch''CfIURP#\?D2gG?2:4%Te=#`[N&TGZ*aD-dCLi0M#cHPR:X1@MLM.;e<CDRelfe_oi^3::f\iCkD('>YKC$phOY)*ICH6?\Y<Fg?=ibf3[1?3<CR5AW%b94%IZRK!^G(BW=o7gVnP!T^;b>"L`f0X(U<bIKh%=ljO1Y+F("JW9N?Ri5n:$_PZ.H69T%^Som'UZLe%5mgEkJYiZ#fmZrEJXX5NRgI%W`o/I$dg/?-<FQSaCm#6'%UR=_r4O^mH10K5,f"'VVhSG5$UFc>#d=nPi\da0B9SH%CTB<OgW'/838dr5$6rAQt[FfpeQ\3_QLeX%YR;^79=_'n4_*s'/hdSD?,Ht\eQ/8o2;:7G3&V7upPR[0pJbIo09JB<Y3\3n._Bu^'],*\+EZSF[$t3a%+\s?8C>[sn'prXDPeTW%1016t9"T@:eZXtkr2`K39"PSdV-SjZBc#4:$PC"XRrRORk35ONR<<Xf).5c;H_J^9.p0i\fS+>iqE4.Mc9nq."&b/'OBpO^R+4Y]%'+!-jpLRFo_JVYr/lu-PqEc_f(;[6E8g"&C@$cLc[l4J%0[+M:)/9/GL&hg1NsRBq1>6NbOLr-!D8GT@2IE!&DMd?J.CMLIlFFX<%&]d;9UMq%_OB(0WUMJ(A.0dX_k9;;OSC`/4>$P1A0ec8fG%"NTTcTtoadC-LU?0.mK_.U4#3%<en,Z,*>+P<:8AKYN3doq?%G#pn%Gq)skBn^Lk_Wl!s4Rq:>o&Yh"aH"WOgG@jP)tMg7paRE,\3W+?8jq)8M"'J=WS3Ne%ll=2;Cs<*>DNu'"Ha($UtCFFlo?>+s/@R2%@)98k4HM;5l8`8@CTter,9ENWR_kS<6N`I.`b=Zr<Q95]4NQP5.pQ4O-=\oX7]4oj>e<*tPeL>1-UP_6:)M4E^1AZIne&*RZFMQ\%k]11'JH:)j#Tb%uVLu/2<&[DQ$QX_mXXkQ'R\_V7Vs,EB7qBZ1%qJTLBWRVs"@GCdaJZM!p=+$tJkEmU"GA<"#D6-q?(YahVBTB3%S3\]F[6)nX/%2SJ?0iGM.`]<<DZ@su0h!ZPS@UbcB%8ol3WsALlKQa@QPqI5HHPOJ'a3hXgJ?q]8S8IO+hOh)@8*-md2t#EAT]3p%Z&VaaJ"?G%3UjeF>s7ig0eILN\iLFH)Qo$k6Zubk@HKXj@mcI"b>f8MT_?QS5dIaW@6_`S,?7**<n8:sF)D4e[Ik`+Q.Ck[f/r/8%Hm@dHk'K<=H_rT$[<:?MU]WWbF`cMVP2%hN\8%`Ans((@HHGj9<Ru0@U4A[WZ-#,RIl6C!*Z?#[Kc\rh?%\-DlfpIK*iHm_mq5G@%!Kfl6ACo?bN'SYMl,r8keBa_lqQ"9lklWOT<V8]&[!a*^K-_3(,T?ea'6Nq]\%W@#&GZrf3b4^XIB(t3`79rq+j>/oH\Q[TL4LEn%WR`%]8'LE:X#*u/bXq>.fZG2lEf)bVU.@`dfb&pA/*[at?<7$*RXsqn[tBd`>*o*pZ(Mj#D(K@fa.JS&.U<[m%f6^5U#G`d0UPhF%>dR*LmL=s4i^GCO[];9T(W"cIG94WGDC^UC]\uI!b?62/LAQDqX&F@CFfl&/]3l*S%XF0M!iK9@=*1NEAO6+sk>7mn:$'s9gXD.0%7KSJb/-I1,]6\su6E29_5\XP\Rt8JEiS\:>Wqf]X7eO'YC$&SQ-J>:t2KZckd<Qsb?N]9+8@o\S\,l%er?2\R6X*hu,?9Y#%anE6%mU3PU`JY4C?!?!K&)nLGEfK0XlLmSL>$#biY;4@Io,<`G<CZJH_"W^DfRVQrM\!po:dMLH,518$Y8o\Dlh:jY$fnMBeF%],Y+C>I%A>"-6JAU(%c3N?A(hSX(.@ASMS.@a'nUV`[+37i3&Kpp8+PIEKI,N3'[h#"=O]SaC1Aop\hW<KUOEFK"^uYY/EdZf]Q4HATQIjCT%nR4@cW7Mo^^UVhQ&"2%KSI=5gnUM#$%M3Ij3P2`)Eu<1'iYm%59d\LHrVSQ2-tZ7es,I2O#goto.D`37e1t<N))a8e]83k"i95>e%d^_U_J"#4!+u3e.G.T]g(,+5J\XXdk"(elSfi.Dt9repiaDleQ;^[CYkg=dorr"'`<K=,jlr?$:]HGpcfa3!\5Q%XH2QmL'ATmsE%YetQ5Mrd*.m.Y)(UOG)1e$X+&N*,N6"'+@>T'ttI&ore:l/VdBo6B\-prtR;Ql]64B#QB$obo3\:o:#+25**XFKat0)#a%#qFn?!%ohomeCdl)m.QS/bqCY2AP.F`[a&cle'YUA`8l;JL'kNt1/msQ3U_VKLlB&.3%PpNij'p!DV8D!qrcZC\oZBg`a`Wp/A4!P5*,<&P%[]1Ecl$A?>MO7%pcY4A)a54kjSGlSp*/p2PVQO!*8n:>6FM4DdcMGu;FWbg19,i#enorqoot$.siD0k&<Q>fT=D"RnNNmYP;rX7_%)JZ<6%WW&[?0Y@.=#3S$*O8]D_Pl`f>,XsAJ])[#h,ijN28)<bj)iCVOe0c=IWXh<%q8JNZXj[:VZ$e_]!>.8&>krS<u->VQO^K+%Y8Df&D.TduDf!DVo3/pdq<adm9]<'7$PcA:=-ZY?do+)oZVYoXgoe\Z/H]];jP39E2l!PB2<aJ2"*UA4b;S*-1gA58ZVXM)S+B5s%;6s`Fiq5nbG@+L$4V+l*+9.uu$2`Q)s1odprR7Cq^A6nE5Q(06?[r%5^HV\mle>4MrU<$9^Am]ocbKDW_s]hh\,=GH:VZo(g[DoT%qW%Hks7sk<!g-R8j557Uh=psEpAYL;'t"~>%AI9_PrivateDataEnd